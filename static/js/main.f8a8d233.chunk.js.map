{"version":3,"sources":["components/Styled/ButtonGroup.js","components/Styled/ButtonList.js","components/Styled/Input.js","components/Styled/Button.js","components/Styled/SideButton.js","components/SubList.js","components/SortMenu.js","components/UserSortMenu.js","components/CommentSortMenu.js","components/Checkbox.js","components/SearchMenu.js","components/SaveList.js","components/Styled/BasicButton.js","components/Settings/Download.js","components/Settings/Upload.js","components/Settings/BackupRestore.js","components/Settings/QRReader.js","components/Settings/Sync.js","components/Settings/Settings.js","redux/reducers.js","redux/store.js","functions/useful.js","components/Styled/Flair.js","components/FlairList.js","components/TopMenu.js","components/Styled/PostTitle.js","components/Styled/PostTextGroup.js","components/Styled/PostDetails.js","components/Styled/PostExpand.js","components/Spoiler.js","components/PostLink.js","components/SubLink.js","components/CommentList.js","components/Comment.js","components/Styled/LoadingSpinner.js","components/PostList.js","components/Gallery.js","components/ErrorBoundary.js","components/Crosspost.js","components/Post.js","components/Styled/SmallButton.js","components/Header.js","components/SideMenu.js","MainPage.js","App.js","serviceWorker.js","index.js"],"names":["ButtonGroup","styled","div","ButtonList","Input","input","Button","button","props","selected","disabled","SideButton","Icon","CustomSub","sub","currentSub","currentUser","currentSort","onDeleteSub","editMode","key","id","className","style","position","top","to","display","textTransform","onClick","checkIfSubbed","subs","section","includes","length","SubList","dispatch","useDispatch","useSelector","state","setSubs","val","type","payload","useState","setEditMode","newSub","setNewSub","newSubArr","filter","subName","addCurrentSub","addSubToStorage","arr","displaySubs","map","filteredSubs","filteredUsers","user","replace","list","setList","data","handle","placeholder","onChange","e","target","value","SortMenu","option","UserSortMenu","currentUserSort","exact","CommentSortMenu","commentSort","changeCommentSort","StyledCheckbox","Checkbox","checked","SearchMenu","history","useHistory","closeMenus","currentSearch","search","setSearch","currentSearchSort","searchSort","setSearchSort","currentSearchSub","searchSub","setSearchSub","useEffect","onSearch","push","decodeURI","onKeyPress","width","saved","currentPostId","obj","url","fontSize","title","BasicButton","small","noBorder","Download","filename","format","Date","dataStr","encodeURIComponent","JSON","stringify","link","document","createElement","setAttribute","click","StyledComp","Upload","onUpload","importData","setImportData","fileName","setFileName","fileInput","useRef","uniqueId","Math","floor","random","file","files","undefined","match","reader","FileReader","name","onload","text","result","parse","readAsText","ref","htmlFor","current","BackupRestore","onUploadSubs","valid","Array","isArray","i","newSubs","forEach","find","toLowerCase","localStorage","setItem","alert","onUploadSaved","newSaved","savedItem","QRReader","setQRCode","constraints","facingMode","onResult","error","sendData","uniqueID","a","signal","dataToSend","appId","syncComplete","objects","syncKey","fetch","method","headers","body","response","json","err","message","Sync","serverReady","setServerReady","beginSyncUp","setBeginSyncUp","showScanner","setShowScanner","status","syncStatus","setSyncStatus","AbortController","fetchController","setFetchController","randomNumber","round","Number","now","setUniqueID","controller","console","log","checkServer","abort","onStartSyncingUp","returnObj","updateState","onSetQRCode","color","marginBottom","margin","size","Settings","subPage","setSubPage","initialState","postDetails","posts","noPosts","noMorePosts","latestPost","comments","extraComments","noComments","flairs","sortMenuOpen","searchMenuOpen","subMenuOpen","saveMenuOpen","settingsMenuOpen","filterMenuOpen","searchForSubs","previousUrl","permalinkUrl","showContext","reducer","action","store","createStore","storedSubs","getItem","storedSaves","storedFlairs","getFromLocalStorage","applyMiddleware","getState","next","parseComment","parent","kind","permalink","parent_id","body_html","author","replies","score","comment","created_utc","stickied","parseBodyText","children","hasContext","parseLinks","redditMatches","aTagMatches","hrefMatch","href","aText","imageText","imgMatch","parseFlair","flair","trim","parseBool","str","getMySubs","prepend","join","getPostList","loadMore","force","setLatestPost","setPosts","setNoPosts","setNoMorePosts","setPreviousUrl","parsedStr","split","baseUrl","batch","newPosts","post","media","oembed","html","display_name","description","description_html","created","subscribers","link_title","link_id","subreddit","domain","selftext_html","num_comments","thumbnail","media_embed","spoiler","link_flair_text","link_flair_text_color","link_flair_background_color","crosspost_parent_list","noMore","getMoreComments","fullUrl","setExtraComments","newComments","parentComment","newExtras","getComments","setComments","setNoComments","setPostDetails","context","media_metadata","is_gallery","gallery_data","getLocalUrl","urlMatches","localUrl","Flair","span","backgroundColor","dim","FlairList","subFlairs","setSubFlairs","editFlairs","setEditFlairs","savedFlairs","changedFlairs","flairName","onClickFlair","subFlairsCopy","hidden","onToggleFlairHidden","sorting","Object","values","flairText","flairColor","flairBgColor","StyledTopMenu","MenuButton","Dropdown","right","TopMenu","onBackClick","Fragment","SaveList","textAlign","PostTitle","PostTextGroup","PostDetails","PostExpand","Spoiler","showSpoiler","setShowSpoiler","StyledPostLink","PostThumbnail","PostComments","PostBody","SpoilerTag","React","memo","onClickLink","expanded","setExpanded","dateString","formatDistanceStrict","showThumbnail","test","bodyContent","dangerouslySetInnerHTML","__html","bodyHasImage","src","alt","rel","openBtn","maxWidth","marginLeft","prevProps","nextProps","AddSubBtn","alreadySubbed","reduce","c","StyledCommentList","CommentList","StyledComment","single","CommentClose","CommentAuthor","original","CommentFooter","CommentLinkTitle","Comment","closed","setClosed","permalinkComment","extras","pointString","LoadingSpinner","PostList","hide","hasMore","dataLength","loader","scrollableTarget","scrollThreshold","getURL","index","limit","u","Gallery","extraData","firstId","items","media_id","setId","isMobile","useMediaQuery","level4","level5","numberOfImages","showSpinner","setShowSpinner","sortedData","item","keys","indexOf","p","s","caption","extraDataObj","onClickThumb","prev","prevId","nextId","left","zIndex","onLoad","dataObj","StyledError","ErrorBoundary","resetError","setState","hasError","errorInfo","this","Component","Crosspost","bodyTag","parsePostBody","StyledPost","ScrollButton","SimpleButton","content","Post","updatePostDetails","window","scrollTo","shortUrl","substr","isSaved","urlTag","commentDiv","querySelector","child","rect","getBoundingClientRect","scrollIntoView","scrollingElement","documentElement","scrollTop","SmallButton","ReloadButton","Header","heading","subHeading","onReload","clearSearch","decodeURIComponent","StyledSideMenu","SavedButton","TopButtons","SideMenu","showSaved","setShowSaved","showSettings","setShowSettings","onClickHideSaved","Page","location","scrollPos","setScrollPos","currentSearchForSubs","currentPermalinkUrl","currentContext","setCurrentUser","parts","newSort","postId","userSort","parseURL","pathname","searchStr","parseSearch","setCurrentPostId","setCurrentUserSort","setPermalinkUrl","setContext","setCurrentSearch","setCurrentSearchSort","setCurrentSearchSub","setSearchForSubs","useCallback","pageYOffset","oldVal","redirectSub","getMainPage","height","overflow","goBack","marginTop","App","path","component","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8a8d233.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst ButtonGroup = styled.div`\n    display: flex;\n\n    & > div {\n        flex-grow: 1;\n    }\n\n    & > a {\n        flex-grow: 1;\n    }\n\n    & > a.selected, & > button.selected {\n        background-color: gray;\n    }\n\n    & > label {\n        border-left: 1px solid gray;\n    }\n\n    & > *:last-child {\n        border-left: 1px solid gray;\n    }\n\n    & > *:first-child {\n        border-left: none;\n    }\n\n    & .handle {\n        width: 40px;\n        min-width: 40px;\n        height: 31px;\n        border-top: 1px solid gray;\n        border-right: 1px solid gray;\n    }\n\n    & .handle:hover {\n        cursor: pointer;\n    }\n`;\n\nexport default ButtonGroup;","import styled from 'styled-components';\n\nconst ButtonList = styled.div`\n    text-align: center;\n    position: relative;\n\n    & *:focus {\n        outline: none;\n    }\n\n    & * {\n        color: white;\n    }\n\n    & a, & label {\n        width: 100%;\n        display: block;\n        padding: 5px;\n        min-height: 29px;\n        border-top: 1px solid gray;\n        overflow: hidden;\n    }\n\n    & a:hover {\n        background-color: gray;\n    }\n\n    & a.active, & > a.selected {\n        background-color: gray;\n    }\n\n    & > a:last-of-type, & > button:last-of-type {\n        border-bottom: 1px solid gray;\n    }\n\n    & > div:last-child > * {\n        border-bottom: 1px solid gray;\n    }\n\n    & > div + h3 {\n        margin-top: 0px;\n        padding-top: 1em;\n        border-top: 1px solid gray;\n    }\n\n    @media screen and (max-device-width: 600px){\n        & div:last-child > * {\n            border-bottom: none;\n        }   \n\n        & a:hover {\n            background-color: black;\n        }\n    }\n`;\n\nexport default ButtonList;","import styled from 'styled-components';\n\nconst Input = styled.input`\n    cursor: text;\n    padding: 5px 10px;\n    flex-grow: 1;\n    width: 100%;\n    margin: 0px;\n    background-color: black;\n    border: none;\n    font-size: 1em;\n    text-align: center;\n    border-top: 1px solid gray;\n    border-radius: 0px;\n\n    &[type=\"checkbox\"] {\n        -webkit-appearance:none;\n        appearance: none;\n        width:30px;\n        height:30px;\n        background:white;\n        border-radius:0px;\n        border:1px solid gray;\n        border-right: none;\n        border-left: none;\n\n        :checked {\n            background-color: green;\n        }\n\n        :hover {\n            cursor: pointer;\n        }\n    }\n`;\n\nexport default Input;","import styled from 'styled-components';\n\nconst Button = styled.button`\n    background-color: black;\n    border: none;\n    text-align: center;\n    padding: 5px;\n    font-size: 1em;\n    width: 100%;\n    margin: 0px;\n    border-top: 1px solid gray;\n    color: white;\n\n    ${props => props.selected ? 'background-color: gray;' : ''};\n    ${props => props.disabled ? 'color: gray' : ''};\n\n    &:hover {\n        cursor: pointer;\n        background-color: gray;\n        ${props => props.disabled ? 'background-color: black; cursor: default' : ''};\n    }\n\n    :focus {\n        outline: none;\n    }\n\n    @media screen and (max-device-width: 600px){\n        &:hover {\n            background-color: black;\n        } \n    }\n`;\n\nexport default Button;","import styled from 'styled-components';\nimport Button from './Button';\n\nconst SideButton = styled(Button)`\n    border-left: 1px solid gray;\n    min-width: 60px;\n    width: auto;\n`;\n\nexport default SideButton;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaEdit, FaTrashAlt } from 'react-icons/fa';\nimport { TiArrowUnsorted } from 'react-icons/ti';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ReactSortable } from 'react-sortablejs';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Input from './Styled/Input';\nimport Button from './Styled/Button';\nimport SideButton from './Styled/SideButton';\n\nconst Icon = styled.div`\n    padding: 5px;\n    font-size: 1.3em;\n    position: absolute;\n    right: 10px;\n    top: -5px;\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst SubList = () => {\n    const dispatch = useDispatch();\n    const currentSub = useSelector(state => state.currentSub);\n    const currentUser = useSelector(state => state.currentUser);\n    let currentSort = useSelector(state => state.currentSort);\n\n    const subs = useSelector(state => state.subs);\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n\n    const [editMode, setEditMode] = useState(subs.length === 0 ? true : false);\n    const [newSub, setNewSub] = useState('');\n\n    const onToggleEdit = () => {\n        setEditMode(!editMode);\n    }\n\n    const onChangeNewSub = (e) => {\n        setNewSub(e.target.value);\n    }\n\n    const onAddNewSub = () => {\n        if (newSub.length === 0) return;\n        addSubToStorage(subs, newSub);\n    }\n\n    const onDeleteSub = (sub) => () => {\n        let newSubArr = subs.filter(subName => subName !== sub);\n        setSubs(newSubArr);\n    }\n\n    const addCurrentSub = () => {\n        if (currentSub === 'user') addSubToStorage(subs, `user/${currentUser}/overview`);\n        else addSubToStorage(subs, currentSub);\n    }\n\n    const addSubToStorage = (arr, sub) => {\n        let newSubArr = [...arr, sub];  \n        setSubs(newSubArr);\n        setNewSub('');\n    }\n\n    const reorder = (data) => {\n        if (data.length === 0) return;\n        let newSubArr = data.map(sub => sub.id);\n        setSubs(newSubArr);\n    }\n\n    if (currentSub === 'user') currentSort = 'hot';\n\n    let displaySubs = subs.map(sub => ({id: sub, display: sub}));\n\n    let filteredSubs = subs.filter(sub => !sub.includes('user/')).map(sub => ({id: sub, display: sub}));\n    let filteredUsers = subs.filter(sub => sub.includes('user/')).map(user => ({id: user, display: user.replace('user/', '').replace('/overview', '')}));\n\n    return (\n        <ButtonList>\n            <h3>General</h3>\n            <NavLink to={`/My Subreddits/${currentSort}`} className={'My Subreddits' === currentSub ? 'selected' : ''}>My Subreddits</NavLink>\n            <NavLink to={`/Popular/${currentSort}`} className={'Popular' === currentSub ? 'selected' : ''}>Popular</NavLink>\n            <NavLink to={`/All/${currentSort}`} className={'All' === currentSub ? 'selected' : ''}>All</NavLink>\n            <h3>Subs</h3>\n            <Icon onClick={onToggleEdit}><FaEdit/></Icon>\n            {\n                editMode \n                    ? ( <ReactSortable list={displaySubs} setList={reorder} handle=\".handle\">\n                            { displaySubs.map(sub => <CustomSub key={'subButton-'+sub.id} sub={sub} currentSub={currentSub} currentUser={currentUser} currentSort={currentSort} onDeleteSub={onDeleteSub} editMode={editMode}/>) }\n                        </ReactSortable> ) \n                    : filteredSubs.map(sub => <CustomSub key={'subButton-'+sub.id} sub={sub} currentSub={currentSub} currentUser={currentUser} currentSort={currentSort} onDeleteSub={onDeleteSub} editMode={editMode}/>)\n            }\n            {\n                editMode ? (\n                    <ButtonGroup>\n                        <Input type=\"text\" placeholder=\"New Sub\" onChange={onChangeNewSub} value={newSub}/>\n                        <SideButton onClick={onAddNewSub}>Add</SideButton>\n                    </ButtonGroup>\n                ) : null\n            }\n            {\n                !checkIfSubbed(subs, currentSub, currentUser, 'subs') ? <Button onClick={addCurrentSub}>Add Current {currentSub === 'user' ? 'User' : 'Sub'}</Button> : null\n            }\n            { editMode ? null : <h3>Users</h3> }\n            {\n                editMode \n                    ? null\n                    : filteredUsers.map(sub => <CustomSub key={'subButton-'+sub.id} sub={sub} currentSub={currentSub} currentUser={currentUser} currentSort={'hot'} onDeleteSub={onDeleteSub} editMode={editMode}/>)\n            }\n            {\n                !checkIfSubbed(subs, currentSub, currentUser, 'users') ? <Button onClick={addCurrentSub}>Add Current {currentSub === 'user' ? 'User' : 'Sub'}</Button> : null\n            }\n        </ButtonList>\n    );\n}\n\nconst CustomSub = ({sub, currentSub, currentUser, currentSort, onDeleteSub, editMode}) => {\n    return (\n        <ButtonGroup key={'sub-'+sub.id}>\n            { editMode ? <div className=\"handle\"><TiArrowUnsorted style={{position: 'relative', top: '8px'}}/></div> : null }\n            <NavLink to={`/${sub.id}/${currentSort}`} className={sub.display === currentSub || sub.display === currentUser ? 'selected' : ''} style={{textTransform: 'capitalize'}}>{sub.display}</NavLink>\n            { editMode ? <SideButton className=\"subBtn\" onClick={onDeleteSub(sub.id)}><FaTrashAlt/></SideButton> : null }\n        </ButtonGroup>\n    );\n}\n\nconst checkIfSubbed = (subs, currentSub, currentUser, section) => {\n    if (section === 'subs' && currentSub === 'user') return true;\n    if (section === 'users' && currentSub !== 'user') return true;\n    if (currentSub === 'user') return subs.includes(`user/${currentUser}/overview`);\n    if (currentSub.length === 0) return true;\n    if (currentSub === 'Popular') return true;\n    if (currentSub === 'All') return true;\n    if (currentSub === 'My Subreddits') return true;\n    if (subs.includes(currentSub)) return true;\n    return false;\n}\n\nexport default SubList;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst SortMenu = () => {\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    let sortOptions = ['hot', 'new', 'rising', 'controversial', 'top', 'comments'];\n\n    return (\n        <ButtonList>\n            <h3>Sort Posts</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'sort-'+option}>\n                            <NavLink to={`/${currentSub}/${option}`} className={option === currentSort ? 'selected' : ''} style={{textTransform: 'capitalize'}}>{option}</NavLink>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default SortMenu;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst UserSortMenu = () => {\n    const dispatch = useDispatch();\n\n    const currentSub = useSelector(state => state.currentSub);\n    const currentUserSort = useSelector(state => state.currentUserSort);\n    const currentUser = useSelector(state => state.currentUser);\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const onClick = (val) => () => {\n        closeMenus();\n    }\n\n    let sortOptions = [\n        {display: 'Overview', value: `overview`}, \n        {display: 'Comments', value: `comments`}, \n        {display: 'Posts', value: `submitted`}, \n    ];    \n\n    return (\n        <ButtonList>\n            <h3>Show</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'commentSort-'+option.value}>\n                            <NavLink exact to={`/${currentSub}/${currentUser}/${option.value}`} className={option.value === currentUserSort ? 'selected' : ''} onClick={onClick(option.value)}>{option.display}</NavLink>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default UserSortMenu;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Button from './Styled/Button';\n\nconst CommentSortMenu = () => {\n    const dispatch = useDispatch();\n\n    const commentSort = useSelector(state => state.commentSort);\n    const changeCommentSort = (val) => dispatch({type: 'SET_COMMENT_SORT', payload: val});\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const onClick = (val) => () => {\n        closeMenus();\n        changeCommentSort(val);\n    }\n\n    let sortOptions = [\n        {display: 'Best', value: 'confidence'}, \n        {display: 'New', value: 'new'}, \n        {display: 'Top', value: 'top'}, \n        {display: 'Controversial', value: 'controversial'}, \n        {display: 'Q&A', value: 'qa'}\n    ];\n\n    return (\n        <ButtonList>\n            <h3>Sort Comments</h3>\n            {\n                sortOptions.map(option => {\n                    return (\n                        <ButtonGroup key={'commentSort-'+option.value}>\n                            <Button className={option.value === commentSort ? 'selected' : ''} onClick={onClick(option.value)}>{option.display}</Button>\n                        </ButtonGroup>\n                    );\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default CommentSortMenu;","import React from 'react';\nimport styled from 'styled-components';\nimport { MdCheckBoxOutlineBlank, MdCheckBox } from 'react-icons/md';\n\nconst StyledCheckbox = styled.div`\n    display: inline-block;\n    font-size: 1.5em;\n    border-top: 1px solid gray;\n\n    & > svg {\n        position: relative;\n        top: 2px;\n    }\n\n    :hover {\n        cursor: pointer;\n    }\n`; \n\nconst Checkbox = ({checked, onClick}) => {\n    return (\n        <StyledCheckbox onClick={onClick}>\n            { checked ? <MdCheckBox/> : <MdCheckBoxOutlineBlank/> }\n        </StyledCheckbox>\n    );\n}\n\nexport default Checkbox;","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\nimport Input from './Styled/Input';\nimport Button from './Styled/Button';\nimport SideButton from './Styled/SideButton';\nimport Checkbox from './Checkbox';\n\nconst SearchMenu = () => {    \n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    const currentSearch = useSelector(state => state.currentSearch);    \n    const [search, setSearch] = useState(currentSearch);\n    const onChangeSearch = (e) => setSearch(e.target.value);\n\n    const currentSearchSort = useSelector(state => state.currentSearchSort);\n    const [searchSort, setSearchSort] = useState(currentSearchSort);\n    const onClickRelevant = () => setSearchSort('relevance');\n    const onClickNew = () => setSearchSort('new');\n\n    const currentSearchSub = useSelector(state => state.currentSearchSub);\n    const [searchSub, setSearchSub] = useState(currentSearchSub);\n    const toggleThisSub = () => setSearchSub(!searchSub);\n\n    useEffect(() => {\n        setSearch(currentSearch);\n    }, [currentSearch]);\n\n    const onSearch = () => {\n        closeMenus();\n        history.push(`/${currentSub}/${currentSort}?search=${search}&searchSort=${searchSort}&searchSub=${searchSub}&searchForSubs=${false}`);\n    }\n\n    const onSearchSubs = () => {\n        closeMenus();\n        history.push(`/${currentSub}/${currentSort}?search=${search}&searchSort=${searchSort}&searchSub=${searchSub}&searchForSubs=${true}`);\n    }\n\n    const onEnter = (e) => {\n        if (e.key === 'Enter') {\n            onSearch();\n        }\n    }\n\n    const onClearSearch = (getNewPosts=true) => {\n        // if (search.length === 0) return; //if there's nothing to clear, don't do anything\n        setSearch('');\n        setSearchSub(true);\n        // setSearchSort('relevance');\n        history.push(`/${currentSub}/${currentSort}`);\n    }\n\n    return (\n        <ButtonList>\n            <h3>Search</h3>\n            <ButtonGroup>\n                <Input type=\"text\" placeholder=\"Search\" onChange={onChangeSearch} value={decodeURI(search)} onKeyPress={onEnter}/>\n                <SideButton onClick={onSearch} disabled={currentSub === 'user' ? true : false}>Search</SideButton>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Checkbox checked={searchSub} onClick={toggleThisSub}/>\n                <label style={{width: '100%'}}>This Sub Only</label>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button selected={searchSort === 'new'} onClick={onClickNew}>New</Button>\n                <Button selected={searchSort === 'relevance'} onClick={onClickRelevant}>Relevant</Button>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button onClick={onSearchSubs} disabled={currentSub === 'user' ? true : false}>Search Subs</Button>\n                <Button onClick={onClearSearch}>Clear Search</Button>\n            </ButtonGroup>\n        </ButtonList>\n    );\n}\n\nexport default SearchMenu;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport ButtonGroup from './Styled/ButtonGroup';\nimport ButtonList from './Styled/ButtonList';\n\nconst SubList = () => {\n    const saved = useSelector(state => state.saved);\n    const currentPostId = useSelector(state => state.currentPostId);\n\n    return (\n        <ButtonList>\n            <h3>Saved</h3>\n            {\n                saved.map(obj => {\n                    return (\n                        <ButtonGroup key={'save-'+obj.id}>\n                            <NavLink to={obj.url} className={obj.id === currentPostId ? 'selected' : ''} style={{textTransform: 'capitalize', fontSize: '0.9em'}}>{obj.sub} - {obj.title}</NavLink>\n                        </ButtonGroup>\n                    )\n                })\n            }\n        </ButtonList>\n    );\n}\n\nexport default SubList;","import styled from 'styled-components';\n\nconst BasicButton = styled.div`\n    background-color: black;\n    color: white;\n    width: 150px;\n    border-radius: 5px;\n    padding: 5px;\n    margin: 5px;\n    display: inline-block;\n    border: 1px solid gray;\n    font-size: 1em;\n\n    ${props => props.small ? `\n        width: auto;\n        margin: 2px;\n        padding: 1px 3px;\n    ` : ''}\n\n    ${props => props.noBorder ? 'border: none;' : ''}\n\n    &:hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n`\n\nexport default BasicButton;","import React from 'react';\nimport { format } from 'date-fns';\n\nimport BasicButton from '../Styled/BasicButton';\n\nconst Download = ({data, filename=`Data - ${format(new Date(),'yyyy-MM-dd')}.json`}) => {\n    const downloadJson = () => {\n        const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data, null, 2));\n\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", dataStr);\n        link.setAttribute(\"download\", filename);\n        link.click();\n    }\n\n    return (\n        <BasicButton onClick={downloadJson}>Download</BasicButton>\n    );\n}\n\nexport default Download;","import React from 'react';\nimport { useState, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst StyledComp = styled.div`\n    display: inline-flex;\n    margin: 5px;\n    color: white;\n\n    & > input {\n        display: none;\n    }\n\n    & > #filename {\n        color: white;\n        width: 150px;\n        height: 28px;\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        display: inline-block;\n        padding: 5px;\n        border: 1px solid gray;\n        border-radius: 5px 0px 0px 5px;\n    }\n\n    & > #uploadButton {\n        display: inline-block;\n        height: 28px;\n        padding: 5px 10px;\n        background-color: gray;\n        border-radius: 0px 5px 5px 0px;\n    }\n\n    & > #uploadButton:hover {\n        cursor: pointer;\n        filter: brightness(75%);\n    }\n\n    & > #filename:hover {\n        cursor: pointer;\n    }\n`;\n\nconst Upload = ({onUpload=()=>{}}) => {\n    const [importData, setImportData] = useState(null);\n    const [fileName, setFileName] = useState('Choose a File');\n    const fileInput = useRef(null);\n\n    const onFileChange = (e) => {\n        const file = e.target.files[0];\n        if (file === undefined) return;\n\n        if (file.type.match('application/json')) {\n            const reader = new FileReader();\n            setFileName(file.name);\n\n            reader.onload = (e) => {\n                let text = reader.result;\n                let obj = JSON.parse(text);\n                \n                setImportData(obj);\n            }\n\n            reader.readAsText(file);\n        } else {\n            setImportData(null);\n            setFileName('Incorrect File Type');\n        }\n    }\n\n    const onImport = () => {\n        if (importData) {\n            setFileName('File Uploaded')\n            onUpload(importData);\n            setImportData(null);\n            fileInput.current.value = '';\n        } else {\n            setFileName('Choose a File');\n        }\n    }\n\n    const uniqueId = 'fileUpload-' + Math.floor(Math.random() * 100);\n\n    return (\n        <StyledComp>\n            <input type='file' id={uniqueId} onChange={onFileChange} ref={fileInput}/>\n            <label id='filename' htmlFor={uniqueId}>{fileName}</label>\n            <div id='uploadButton' onClick={onImport}>Upload</div>\n        </StyledComp>\n    );\n}\n\nexport default Upload;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Download from './Download';\nimport Upload from './Upload';\n\nconst StyledComp = styled.div`\n\n`\n\nconst BackupRestore = () => {\n    const dispatch = useDispatch();\n    const saved = useSelector(state => state.saved);\n    const subs = useSelector(state => state.subs);\n\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n    const setSaved = (val) => dispatch({type: 'SET_SAVED', payload: val});\n\n    const onUploadSubs = (data) => {\n        //data checks\n        let valid = true;\n        if (!Array.isArray(data)) valid = false;\n        if (data.length === 0) valid = false;\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[i] !== 'string') { valid = false; break; }\n        }\n\n        if (!valid) {\n            alert('File not valid');\n            return;\n        }\n\n        //merge with existing data\n        let newSubs = [...subs];\n        data.forEach(sub => {\n            let old = subs.find(name => name.toLowerCase() === sub.toLowerCase());\n            if (old !== undefined) return;\n            newSubs.push(sub);\n        });\n\n        //set to state and save to localstorage\n        setSubs(newSubs);\n        localStorage.setItem('subs', JSON.stringify(newSubs));\n    }\n    \n    const onUploadSaved = (data) => {\n        //data checks\n        let valid = true;\n        if (!Array.isArray(data)) valid = false;\n        if (data.length === 0) valid = false;\n        for (let i = 0; i < data.length; i++) {\n            let obj = data[i];\n            if (typeof obj !== 'object') { valid = false; break; }\n            if (!obj.id || !obj.title || !obj.sub || !obj.url) { valid = false; break; }\n        }\n\n        if (!valid) {\n            alert('File not valid');\n            return;\n        }\n\n        //merge with existing data\n        let newSaved = [...saved];\n        data.forEach(savedItem => {\n            if (saved.find((obj) => obj.id === savedItem.id)) return;\n            newSaved.push(savedItem);\n        });\n\n        //set to state and save to localstorage\n        setSaved(newSaved);\n        localStorage.setItem('saved', JSON.stringify(newSaved));\n    }\n\n    const onUploadBoth = (data) => {\n        if (data.subs !== undefined) onUploadSubs(data.subs);\n        if (data.saved !== undefined) onUploadSaved(data.saved);\n    }\n\n    return (\n        <StyledComp>\n            <p>Download and Upload the list of subs and saved posts.</p>\n            <div id=\"group\">\n                <div>Sub List</div>\n                <Upload onUpload={onUploadSubs}/>\n                <Download data={subs} filename='Reddit Sub List.json'/>\n            </div>\n            <div id=\"group\">\n                <div>Save List</div>\n                <Upload onUpload={onUploadSaved}/>\n                <Download data={saved} filename='Reddit Saved List.json'/>\n            </div>\n            <div id=\"group\">\n                <div>Both</div>\n                <Upload onUpload={onUploadBoth}/>\n                <Download data={{subs: subs, saved: saved}} filename='Reddit Backup.json'/>\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default BackupRestore;","import React from 'react';\nimport { QrReader } from 'react-qr-reader';\n\nconst QRReader = ({setQRCode}) => {\n  return (\n    <div>\n      <QrReader\n        constraints={{facingMode: 'environment'}}\n        onResult={(result, error) => {\n          if (result) {\n            setQRCode(result?.text);\n          }\n\n          if (error) {\n            // console.info(error);\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default QRReader;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport QRCode from 'react-qr-code';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport QRReader from './QRReader';\nimport BasicButton from '../Styled/BasicButton';\n\nconst StyledComp = styled.div`\n    margin-top: 10px;\n    padding: 10px;\n    #qrcode {\n        background-color: white;\n        padding: 10px;\n    }\n`\n\nconst sendData = async (uniqueID, subs, saved, url, type='merge', signal) => {\n    //app ID to make sure both requests come from the same app\n    const appID = 'asui248a9db37gruba92ge';\n\n    let dataToSend = {\n        uniqueID: uniqueID,\n        appId: appID,\n        type: type,\n        syncComplete: false,\n        objects: [\n            {\n                key: 'SET_SUBS',\n                type: 'strings',\n                objects: subs\n            },\n            {\n                key: 'SET_SAVED',\n                type: 'objects',\n                syncKey: 'id',\n                objects: saved\n            }\n        ]\n    };\n    try {\n        let response = await fetch('https://general-sync-server.herokuapp.com/api/'+url, {\n            signal: signal,\n            method: 'POST',\n            headers: {'content-type': 'application/json'},\n            body: JSON.stringify(dataToSend)\n        })\n        let data = await response.json();\n        return data;\n    } catch (err) {\n        return {err: err.message};\n    }\n}\n\nconst Sync = () => {\n    const dispatch = useDispatch();\n\n    const saved = useSelector(state => state.saved);\n    const subs = useSelector(state => state.subs);\n\n    const [serverReady, setServerReady] = useState(false);\n    const [beginSyncUp, setBeginSyncUp] = useState(false);\n    const [showScanner, setShowScanner] = useState(false);\n\n    const [syncStatus, setSyncStatus] = useState({status: '', message: ''});\n\n    const [fetchController, setFetchController] = useState(new AbortController());\n\n    //create a uniqueID to use for the QR code\n    const randomNumber = Math.round(Number(Date.now() + '' + Math.random()*10000))+'';\n    const [uniqueID, setUniqueID] = useState(randomNumber);\n\n    useEffect(() => {\n        const controller = new AbortController();\n        const { signal } = controller;\n\n        const checkServer = async () => {\n            try {\n                let response = await fetch('https://general-sync-server.herokuapp.com/', { signal });\n                let data = await response.json();\n                if (data.status === 'Ready') {\n                    setServerReady(true);\n                }\n            } catch (err) {\n                console.log(err.message);\n            }\n        }\n        checkServer();\n\n        //on unmount, abort any outstanding fetch requests\n        return () => {\n            controller.abort();\n            fetchController.abort();\n        }\n    }, []);\n\n    const onStartSyncingUp = (type) => async () => {\n        setBeginSyncUp(true);\n        setSyncStatus({status: '', message: ''});\n        let returnObj = await sendData(uniqueID, subs, saved, 'send', type, fetchController.signal);\n\n        //if use leaves the settings section, the fetch is aborted, so don't need to update state.\n        if (returnObj.err === 'The user aborted a request.') return;\n        console.log(returnObj);\n        let message = updateState(returnObj);\n        setSyncStatus(message);\n        setBeginSyncUp(false);\n    }\n\n    const cancelSyncUp = () => {\n        setBeginSyncUp(false);\n\n        //abort the current fetch and create a new abortController\n        fetchController.abort();\n        setFetchController(new AbortController());\n\n        //new ID ready for the next attempt\n        const randomNumber = Math.round(Number(Date.now() + '' + Math.random()*10000))+'';\n        setUniqueID(randomNumber);\n    }\n\n    const onStartSyncDown = () => {\n        setSyncStatus({status: '', message: ''});\n        setShowScanner(true);\n    }\n\n    const onCancelSyncDown = () => {\n        setSyncStatus({status: '', message: ''});\n        setShowScanner(false);\n    }\n\n    const onSetQRCode = async (value) => {\n        setShowScanner(false);\n        let returnObj = await sendData(value, subs, saved, 'receive', '', fetchController.signal);\n        let message = updateState(returnObj);\n        setSyncStatus(message);\n    }\n\n    const updateState = (returnObj) => {\n        if (returnObj.status === 'success' && typeof returnObj.data !== 'string') {\n            let data = returnObj.data;\n            data.forEach(obj => {\n                dispatch({type: obj.key, payload: obj.objects})\n            });\n            return {status: 'success', message: 'Sync Successful'};\n        } else if (returnObj.status === 'error') {\n            return {status: 'error', message: returnObj.data};\n        } else {\n            return {status: returnObj.status, message: returnObj.data};\n        }\n    }\n\n    if (serverReady === false) {\n        return (\n            <StyledComp>\n                Waiting for Server...\n            </StyledComp>\n        );\n    }\n\n    if (beginSyncUp === false && showScanner === false) {\n        return (\n            <StyledComp>\n                { syncStatus.status === 'success' \n                    ? <div style={{color: '#00FF00', marginBottom: '10px'}}>{syncStatus.message}</div>\n                    : <div style={{color: '#FF0000', marginBottom: '10px'}}>{syncStatus.message}</div>\n                }\n                <div>Please choose the direction to sync. Note: using Up or Down will overwrite data.</div><br/>\n\n                <div>Up syncs from this device to the one scanning. </div>\n                <BasicButton onClick={onStartSyncingUp('up')}>Up</BasicButton>\n\n                <div>Merge combines the data from both.</div>\n                <BasicButton onClick={onStartSyncingUp('merge')}>Merge</BasicButton>\n\n                <div>Down syncs from the device scanning to this one. </div>\n                <BasicButton onClick={onStartSyncingUp('down')}>Down</BasicButton>\n                <br/><br/>\n\n                <div>Or scan for the QR Code from another device.</div>\n                <BasicButton onClick={onStartSyncDown}>Scan QR Code</BasicButton>\n            </StyledComp>\n        );\n    }\n\n    if (beginSyncUp) {\n        return (\n            <StyledComp>\n                <div id='qrcode' style={{margin: '10px', marginBottom: '20px'}}>\n                    <QRCode value={uniqueID} size={180}/>\n                </div>\n                <div>\n                    Scan the QR code on the device you want to sync with.\n                </div>\n                <br/>\n                <div>\n                    Waiting for data.\n                </div>\n                <br/>\n                <BasicButton onClick={cancelSyncUp}>Cancel</BasicButton>\n            </StyledComp>\n        );\n    }\n\n    if (showScanner) {\n        return (\n            <StyledComp>\n                <div>\n                    Scan the QR code\n                </div>\n                { showScanner ? <QRReader setQRCode={onSetQRCode}/> : null }\n                <BasicButton onClick={onCancelSyncDown}>Cancel</BasicButton>\n            </StyledComp>\n        );\n    }\n}\n\nexport default Sync;","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport BackupRestore from './BackupRestore';\nimport Sync from './Sync';\nimport BasicButton from '../Styled/BasicButton';\n\nconst StyledComp = styled.div`\n    text-align: center;\n\n    & > #group {\n        margin-top: 20px;\n    }\n`;\n\nconst Settings = () => {\n    const [subPage, setSubPage] = useState('');\n\n    const onClickBackup = () => {\n        setSubPage('Backup');\n    }\n\n    const onClickSync = () => {\n        setSubPage('Sync');\n    }\n\n    return (\n        <StyledComp>\n            <h3>Settings</h3>\n            <BasicButton onClick={onClickBackup}>Backup/Restore</BasicButton>\n            <BasicButton onClick={onClickSync}>Sync</BasicButton>\n            { subPage === 'Backup' ? <BackupRestore/> : null }\n            { subPage === 'Sync' ? <Sync/> : null }\n        </StyledComp>\n    );\n}\n\nexport default Settings;","const initialState = {\n    currentSub: '',\n    currentSort: 'hot',\n    currentPostId: '',\n    currentUserSort: 'overview',\n    currentUser: '',\n\n    postDetails: {},\n    posts: [],\n    noPosts: false,\n    noMorePosts: false,\n    latestPost: '',\n\n    comments: [],\n    extraComments: [],\n    noComments: false,\n    commentSort: 'new',\n\n    subs: [],\n    saved: [],\n    flairs: {},\n\n    sortMenuOpen: false,\n    searchMenuOpen: false,\n    subMenuOpen: false,\n    saveMenuOpen: false,\n    settingsMenuOpen: false,\n    filterMenuOpen: false,\n\n    currentSearch: '',\n    currentSearchSort: 'relevance',\n    currentSearchSub: true,\n    searchForSubs: false,\n\n    previousUrl: '',\n    permalinkUrl: '',\n    showContext: false,\n};\n\nexport const reducer = (state = initialState, action={}) => {\n    const data = action.payload;    \n    switch(action.type){\n        case 'SET_SUB': return {...state, currentSub: data};\n        case 'SET_SORT': return {...state, currentSort: data};\n        case 'SET_POSTID': return {...state, currentPostId: data};\n        case 'SET_USER_SORT': return {...state, currentUserSort: data};\n        case 'SET_USER': return {...state, currentUser: data};\n\n        case 'SET_POSTS': return {...state, posts: data};\n        case 'SET_POST_DETAILS': return {...state, postDetails: data, extraComments: []};\n\n        case 'CLEAR_SEARCH': return {...state, currentSearch: '', currentSearchSort: 'relevance', currentSearchSub: true, searchMenuOpen: false};\n        case 'OPEN_SEARCH': return {...state, searchMenuOpen: true, settingsMenuOpen: false, sortMenuOpen: false, subMenuOpen: false, saveMenuOpen: false, filterMenuOpen: false};\n        case 'CLOSE_SEARCH': return {...state, searchMenuOpen: false};\n\n        case 'OPEN_SUBS': return {...state, subMenuOpen: true, settingsMenuOpen: false, sortMenuOpen: false, searchMenuOpen: false, saveMenuOpen: false, filterMenuOpen: false};\n        case 'CLOSE_SUBS': return {...state, subMenuOpen: false};\n\n        case 'OPEN_SORT': return {...state, sortMenuOpen: true, settingsMenuOpen: false, subMenuOpen: false, searchMenuOpen: false, saveMenuOpen: false, filterMenuOpen: false};\n        case 'CLOSE_SORT': return {...state, sortMenuOpen: false};\n\n        case 'OPEN_SAVED': return {...state, saveMenuOpen: true, settingsMenuOpen: false, sortMenuOpen: false, subMenuOpen: false, searchMenuOpen: false, filterMenuOpen: false};\n        case 'CLOSE_SAVED': return {...state, saveMenuOpen: false};\n\n        case 'OPEN_SETTINGS': return {...state, settingsMenuOpen: true, saveMenuOpen: false, sortMenuOpen: false, subMenuOpen: false, searchMenuOpen: false, filterMenuOpen: false};\n        case 'CLOSE_SETTINGS': return {...state, settingsMenuOpen: false};\n\n        case 'OPEN_FILTER': return {...state, filterMenuOpen: true, settingsMenuOpen: false, saveMenuOpen: false, sortMenuOpen: false, subMenuOpen: false, searchMenuOpen: false};\n        case 'CLOSE_FILTER': return {...state, filterMenuOpen: false};\n\n        case 'CLOSE_MENUS': return {...state, settingsMenuOpen: false, sortMenuOpen: false, searchMenuOpen: false, subMenuOpen: false, saveMenuOpen: false, filterMenuOpen: false};\n\n        case 'SET_SUBS': return {...state, subs: data};\n        case 'SET_SAVED': return {...state, saved: data};\n        case 'SET_FLAIRS': return {...state, flairs: data};\n\n        case 'SET_CURRENT_SEARCH': return {...state, currentSearch: data};\n        case 'SET_CURRENT_SEARCH_SORT': return {...state, currentSearchSort: data};\n        case 'SET_CURRENT_SEARCH_SUB': return {...state, currentSearchSub: data};\n        case 'SET_SEARCH_FOR_SUBS': return {...state, searchForSubs: data};\n\n        case 'SET_NO_POSTS': return {...state, noPosts: data};\n        case 'SET_LATEST_POST': return {...state, latestPost: data};\n        case 'SET_NO_MORE_POSTS': return {...state, noMorePosts: data};\n\n        case 'SET_COMMENTS': return {...state, comments: data};\n        case 'SET_EXTRA_COMMENTS': return {...state, extraComments: data};\n        case 'SET_NO_COMMENTS': return {...state, noComments: data};\n        case 'SET_COMMENT_SORT': return {...state, commentSort: data};\n\n        case 'SET_PREVIOUS_URL': return {...state, previousUrl: data};\n        case 'SET_PERMALINK_URL': return {...state, permalinkUrl: data};\n        case 'SET_SHOW_CONTEXT': return {...state, showContext: data};\n        default: return state;\n    }\n};","import { createStore, applyMiddleware } from 'redux';\nimport { reducer } from './reducers';\n\nconst localStorageMiddleware = ({getState}) => {\n    return (next) => (action) => {\n        const result = next(action);\n        let state = getState();\n\n        if (action.type === 'SET_SUBS') {\n            let subs = state.subs;\n            localStorage.setItem('subs', JSON.stringify(subs));\n        } else if (action.type === 'SET_SAVED') {\n            let saved = state.saved;\n            localStorage.setItem('saved', JSON.stringify(saved));\n        } else if (action.type === 'SET_FLAIRS') {\n            let flairs = state.flairs;\n            localStorage.setItem('reddit-flairs', JSON.stringify(flairs));\n        }\n\n        return result;\n    }\n};\n\nconst getFromLocalStorage = () => {\n    let storedSubs = localStorage.getItem('subs');\n    if (storedSubs !== undefined) storedSubs = JSON.parse(storedSubs);\n    let storedSaves = localStorage.getItem('saved');\n    if (storedSaves !== undefined) storedSaves = JSON.parse(storedSaves);\n    let storedFlairs = localStorage.getItem('reddit-flairs');\n    if (storedFlairs !== undefined) storedFlairs = JSON.parse(storedFlairs);\n    let state = reducer();\n\n    if (!storedSubs) storedSubs = [];\n    if (!storedSaves) storedSaves = [];\n    if (!storedFlairs) storedFlairs = {};\n\n    return {\n        ...state,\n        subs: storedSubs,\n        saved: storedSaves,\n        flairs: storedFlairs\n    }\n}\n\nconst store = createStore(reducer, getFromLocalStorage(), applyMiddleware(localStorageMiddleware));\n\nexport default store;","import store from '../redux/store';\nimport { batch } from 'react-redux';\n\nconst parseComment = (obj, parent=null) => {        \n    //adding support for more comment loading within replies\n    if (obj.kind === 'more') {        \n        let permalink = parent !== null ? parent.data.permalink.match(/\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+\\/([a-zA-Z0-9_]+)\\//)[1] : '';\n        return {\n            kind: 'more',\n            id: obj.data.parent_id.replace('t1_',''),\n            body_html: '',\n            name: '',\n            author: '',\n            replies: [],\n            score: 0,\n            permalink: permalink\n        };\n    }\n    \n    let comment = obj.data;\n    let {body_html, id, name, author, permalink, replies, score, created_utc, parent_id, stickied} = comment;\n    body_html = parseBodyText(body_html);\n    \n    replies = typeof replies === 'object' ? replies.data.children : [];\n    \n    replies = replies.map(comment => {\n        return parseComment(comment, obj);\n    });\n\n    const hasContext = !parent_id.includes('t3_');\n    \n    return {body_html, id, name, author, permalink, replies, score, created_utc, hasContext, stickied};\n}\n\nconst parseLinks = (text, body=false) => {\n    //make sure any links within the body open in a new tab\n    text = text.replace(/<a/g, '<a target=\"_blank\" rel=\"noopener noreferrer\"');\n    \n    //but links to other reddit subs or users can be kept on this website\n    text = text.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/r/g, 'href=\"#');  \n    text = text.replace(/target=\"_blank\" rel=\"noopener noreferrer\" href=\"\\/u/g, 'href=\"#/user');  \n\n    //replace full links to reddit with local links to stay on this website\n    let redditMatches = text.match(/href=\"https:\\/\\/www.reddit.com\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+/g);\n    if (redditMatches !== null) redditMatches.forEach(match => {\n        let sub = match.match(/r\\/([a-zA-Z0-9]+)/)[1];\n        let id = match.match(/comments\\/([a-zA-Z0-9]+)/)[1];\n        text = text.replace(`target=\"_blank\" rel=\"noopener noreferrer\" ${match}`, `href=\"#/${sub}/comments/${id}`);\n    });\n\n    if (body) {\n        //Check for image links and replace with image (only check paragraphs to ignore inline image links)\n        let aTagMatches = text.match(/<p><a\\b[^>]*>(.*?)<\\/a>( ?)<\\/p>/g);\n        if (aTagMatches) {\n            aTagMatches.forEach(a => {\n                //get full href\n                let hrefMatch = a.match(/href=\"(.[^\"]+)\"/);\n                if (hrefMatch === undefined || hrefMatch.length < 2) return;\n                let href = parseBodyText(hrefMatch[1]);\n    \n                //check <a> tag description if not the same as url\n                let aText = a.match(/<p><a\\b[^>]*>(.*?)<\\/a><\\/p>/);\n                let imageText = '';\n                if (aText && aText.length > 1) {\n                    imageText = parseBodyText(aText[1]);\n                    if (imageText === href) imageText = '';\n                }\n        \n                //basic check if link is an image link\n                let imgMatch = href.match(/\\.jpg|\\.bmp|\\.jpeg|\\.png|\\.gif/);\n        \n                //if it is, replace with img tag\n                if (imgMatch && imgMatch.length > 0) {\n                    text = text.replace(a, `<p class=\"bodyImage\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"${href}\"><img src=\"${href}\"/><span>${imageText}</span></a></p>`);\n                }\n            });\n        }\n    }\n\n    return text;\n}\n\nconst parseBodyText = (text) => {\n    text ? text = text\n                    .replace(/&lt;/g,'<')\n                    .replace(/&gt;/g,'>')\n                    .replace(/&amp;#39;/g,\"'\")\n                    .replace(/&amp;quot;/g,'\"')\n                    .replace(/&amp;/g,\"&\")\n                    .replace(/&#x200B;/g,' ')\n                        : text = '';\n    return text;\n}\n\nconst parseFlair = (flair) => {\n    if (flair === undefined || flair === null) return '';\n\n    //filter out flair logos\n    flair = flair.length > 0 ? flair.replace(/:[a-zA-Z0-9_-]+:/g, '') : '';\n    flair = flair.trim();\n    flair = parseBodyText(flair);\n    return flair;\n}\n\nconst parseURL = (url) => {\n    let parts = url.split('/');\n    let sub = '';\n    let newSort = '';\n    let postId = '';\n    let userSort = '';\n    let permalinkUrl = '';\n    let user = '';\n\n    if (parts.length > 0) {\n        parts[1] !== undefined ? sub = parts[1] : sub = '';\n        parts[2] === 'comments' && parts[3] !== undefined ? postId = parts[3] : postId = '';\n        parts[2] !== 'comments' && parts[2] !== undefined ? newSort = parts[2] : newSort = '';\n        if (parts[2] === 'comments' && parts[3] === undefined) newSort = 'comments';\n        if (parts[2] !== 'comments' && parts[2] === undefined) newSort = 'hot';\n        if (parts[1] === 'user' && parts[3] !== undefined) userSort = parts[3];\n        if (parts[1] === 'user' && parts[3] === undefined) userSort = 'overview';\n        if (parts[1] === 'user' && parts[2] !== undefined) { user = parts[2]; newSort = ''; }\n        if ([parts[2] === 'comments'] && parts[4] !== undefined && parts[5] !== undefined) permalinkUrl = parts[4] + '/' + parts[5];\n    }    \n\n    return {sub, newSort, postId, userSort, permalinkUrl, user};\n}\n\nconst parseBool = (str) => {\n    return str === 'true' ? true : false;\n}\n\nconst parseSearch = (searchStr) => {\n    searchStr = searchStr.replace('&amp;', '%26'); //if search string contains &, replace with %26 so the regex still catches it\n    let search = searchStr.match(/search=([^&]+)/);\n    let searchSort = searchStr.match(/searchSort=(relevance|new)/);\n    let searchSub = searchStr.match(/searchSub=(true|false)/);\n    let searchForSubs = searchStr.match(/searchForSubs=(true|false)/);\n    \n    search = search === null ? '' : search[1];\n    searchSort = searchSort === null ? 'relevance' : searchSort[1];\n    searchSub = searchSub === null ? true : parseBool(searchSub[1]);\n    searchForSubs = searchForSubs === null ? false : parseBool(searchForSubs[1]);\n\n    search = search.replace(/%20/g, ' ').replace(/%22/g, '\"');\n\n    return {search, searchSort, searchSub, searchForSubs};\n}\n\nconst getMySubs = (prepend) => {\n    let currentSub = '';\n    let storedSubs = localStorage.getItem('subs');\n    storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n    storedSubs = storedSubs.filter(sub => (!sub.includes('/'))); //filter items with / in, such as user links\n    currentSub = prepend+storedSubs.join('+');\n    if (storedSubs.length === 0) currentSub = prepend+'All';\n    return currentSub;\n}\n\nconst getPostList = async (loadMore=false, force=false) => {\n    const state = store.getState();\n    let { posts, currentSub, currentSort, currentUser, currentUserSort, currentSearch, currentSearchSort, currentSearchSub, latestPost, searchForSubs, previousUrl } = state;\n    const setLatestPost = (val) => store.dispatch({type: 'SET_LATEST_POST', payload: val});\n    const setPosts = (val) => store.dispatch({type: 'SET_POSTS', payload: val});\n    const setNoPosts = (val) => store.dispatch({type: 'SET_NO_POSTS', payload: val});\n    const setNoMorePosts = (val) => store.dispatch({type: 'SET_NO_MORE_POSTS', payload: val});\n    const setPreviousUrl = (val) => store.dispatch({type: 'SET_PREVIOUS_URL', payload: val});\n\n    //if no sub, then don't get anything\n    if (currentSub.length === 0) return;\n\n    if (currentSub.length > 0) currentSub = 'r/'+currentSub;    \n\n    if (currentSub === 'r/My Subreddits') currentSub = getMySubs('r/');\n    \n    try {\n        let url = `https://www.reddit.com/${currentSub}/${currentSort}/.json`;\n        if (loadMore) url += `?after=${latestPost}`;\n\n        if (currentSearch.length > 0) {\n            let parsedStr = currentSearch.split(' ').join('+');\n            if (searchForSubs) url = `https://www.reddit.com/${currentSub}/search.json?q=${parsedStr}&include_over_18=on&sort=relevance&type=sr`;\n            else url = `https://www.reddit.com/${currentSub}/search.json?q=${parsedStr}${currentSearchSub ? '&restrict_sr=on' : ''}&include_over_18=on&sort=${currentSearchSort}`;\n\n            if (loadMore) {\n                url += `&after=${latestPost}`;\n            }\n        }\n\n        if (currentSub.length === 0) url = 'https://www.reddit.com/.json';        \n\n        if (currentSub === 'r/user') {\n            url = `https://www.reddit.com/user/${currentUser}/${currentUserSort}.json`;  \n            if (loadMore) url += `?after=${latestPost}`;\n        }\n\n        if (decodeURI(url) === decodeURI(previousUrl) && force === false) return;\n        else {\n            let baseUrl = url.replace(/\\?after=[a-zA-Z0-9_]+/, '');\n            setPreviousUrl(baseUrl);\n        }\n\n        if (!loadMore) {\n            setPosts([]);\n            setNoPosts(false);\n            setNoMorePosts(false);\n        }        \n\n        // console.log('Fetching data with url: '+url);\n        let response = await fetch(url);\n        let data = await response.json();\n\n        if (data.error){\n            console.log('Getting Post List - Error: ', data.error);\n            if (!loadMore) {\n                batch(() => {\n                    setNoPosts(true);\n                    setPosts([]);\n                });\n            }\n        } else {\n            if (data && data.data && data.data.children){\n                let newPosts = data.data.children.map(post => {                    \n                    const data = post.data;\n\n                    let media = data.media;\n                    if (media && media.oembed){\n                        media = parseBodyText(media.oembed.html);\n                    } else {\n                        media = '';\n                    }                    \n\n                    if (post.kind === 't5') return {\n                        id: data.id,\n                        name: data.name,\n                        type: 'sub',\n                        title: parseBodyText(data.title),\n                        subName: data.display_name,\n                        description: parseBodyText(data.description_html),\n                        created: data.created_utc,\n                        subscribers: data.subscribers,\n                    }\n\n                    if (post.kind === 't1') {\n                        let comment = parseComment(post);                        \n                        comment.type = 'comment';\n                        comment.link_title = data.link_title;\n                        comment.link_id = data.link_id;\n                        comment.subreddit = data.subreddit;\n                        return comment;\n                    }\n                    \n                    return {\n                        type: 'post',\n                        created: data.created_utc,\n                        author: data.author,\n                        domain: data.domain,\n                        title: parseBodyText(data.title),\n                        id: data.id,\n                        name: data.name,\n                        body: parseBodyText(data.selftext_html),\n                        num_comments: data.num_comments,\n                        score: data.score,\n                        subreddit: data.subreddit,\n                        stickied: data.stickied,\n                        url: data.url,\n                        thumbnail: data.thumbnail, //if no thumbnail - \"self\"\n                        permalink: data.permalink,\n                        media: media,\n                        media_embed: data.media_embed,\n                        spoiler: data.spoiler,\n                        link_flair_text: data.link_flair_text,\n                        link_flair_text_color: data.link_flair_text_color,\n                        link_flair_background_color: data.link_flair_background_color,\n                        crosspost_parent_list: data.crosspost_parent_list\n                    };\n                });\n\n                let noMore = newPosts.length === 0 ? true : false;\n                if (loadMore) newPosts = [...posts, ...newPosts];\n\n                batch(() => {\n                    if (!noMore) setLatestPost(newPosts[newPosts.length-1].name);                                \n                    setPosts(newPosts);\n                    if (noMore) setNoMorePosts(true);\n                    if (noMore && !loadMore) setNoPosts(true);\n                });\n            }\n        }\n    } catch (error) {\n        console.log('Getting Post List - URL Error: ', error);\n        if (!loadMore) {\n            batch(() => {\n                setNoPosts(true);\n                setPosts([]);\n            });\n        }\n    }\n};\n\nconst getMoreComments = async (id, fullUrl) => {\n    const state = store.getState();\n    const { extraComments, currentSub, currentPostId } = state;\n    const setExtraComments = (val) => store.dispatch({type: 'SET_EXTRA_COMMENTS', payload: val});\n\n    try {\n        let response = await fetch(`https://www.reddit.com/r/${currentSub}/comments/${currentPostId}/${fullUrl}/${id}.json`);\n        let data = await response.json();\n\n        if (data.error) {\n            console.log('Getting More Comments - Error: ', data.error);\n        } else {\n            let newComments = data[1].data.children.map(obj => {\n                return parseComment(obj);\n            });\n            \n            //make sure it doesn't already exist in case it tried to load more twice\n            let parentComment = newComments[0];\n            let check = extraComments.find(obj => obj.id === parentComment.id);\n            if (check === undefined) {\n                let newExtras = [...extraComments, parentComment];\n                setExtraComments(newExtras);\n            }\n        }\n    } catch (error) {\n        console.log('Getting More Comments - URL Error: ', error);\n    }\n}\n\nconst getComments = async () => {\n    const state = store.getState();\n    let { currentSub, currentPostId, commentSort, permalinkUrl, showContext } = state;\n    const setComments = (val) => store.dispatch({type: 'SET_COMMENTS', payload: val});\n    const setNoComments = (val) => store.dispatch({type: 'SET_NO_COMMENTS', payload: val});\n    const setPostDetails = (val) => store.dispatch({type: 'SET_POST_DETAILS', payload: val});\n\n    if (currentPostId.length === 0) return;\n\n    setComments([]);\n    setNoComments(false);\n    \n    if (currentSub === 'My Subreddits') currentSub = getMySubs();\n\n    let url = `${currentSub}/comments/${currentPostId}/${permalinkUrl}`;    \n    let context = showContext && permalinkUrl.length > 0 ? 10000 : 3;\n\n    try {        \n        let response = await fetch(`https://www.reddit.com/r/${url}.json?sort=${commentSort}&context=${context}`);\n        let data = await response.json();\n        \n        if (data.error){\n            console.log('Getting Comments - Error: ', data.error);\n        } else {\n            let {title, selftext_html, id, url, media, media_embed, media_metadata, is_gallery, gallery_data, author, created_utc, permalink, spoiler, crosspost_parent_list} = data[0].data.children[0].data;\n\n            let comments = data[1].data.children.map(obj => {\n                return parseComment(obj);\n            });\n\n            batch(() => {\n                setPostDetails({id, url, title, author, created:created_utc, body: parseBodyText(selftext_html), media, media_embed, permalink, media_metadata, is_gallery, gallery_data, spoiler, crosspost_parent_list});\n                setComments(comments);\n                if (comments.length === 0) setNoComments(true);\n            });\n        }\n    } catch (error) {\n        console.log('Getting Comments - URL Error: ', error);\n    }\n};\n\nconst updatePostDetails = () => {\n    const posts = store.getState().posts;\n    const currentPostId = store.getState().currentPostId;\n    const setPostDetails = (val) => store.dispatch({type: 'SET_POST_DETAILS', payload: val});\n\n    let post = undefined;\n    if (currentPostId.length > 0) post = posts.find(post => post.id === currentPostId);\n    if (post === undefined) setPostDetails({});\n    else setPostDetails(post);  \n}\n\nconst getLocalUrl = (url, currentSub, currentPostId) => {\n    let urlMatches = url.match(/\\/r\\/[a-zA-Z0-9]+\\/comments\\/[a-zA-Z0-9]+/g);\n    let localUrl = undefined;\n    if (urlMatches && urlMatches.length > 0) {\n        let match = urlMatches[0];\n        let sub = match.match(/r\\/([a-zA-Z0-9]+)/)[1];\n        let id = match.match(/comments\\/([a-zA-Z0-9]+)/)[1];\n        let alreadyHere = sub === currentSub && id === currentPostId;\n        if (sub !== undefined && id !== undefined && !alreadyHere) localUrl = `#/${sub}/comments/${id}`;\n    }\n\n    return localUrl;\n}\n\nexport {\n    parseComment, \n    parseBodyText,\n    parseFlair,\n    parseLinks,\n    parseURL,\n    parseSearch,\n    getPostList,\n    getComments,\n    getMoreComments,\n    updatePostDetails,\n    getLocalUrl\n}","import styled from 'styled-components';\n\nconst Flair = styled.span`\n    margin-right: 5px;\n    padding: 1px 3px;\n    color: ${props => props.color === 'light' ? 'white' : 'black'};\n    background-color: ${props => props.backgroundColor};\n    ${props => props.dim ? 'opacity: 0.4;' : ''}\n    cursor: pointer;\n`;\n\nexport default Flair;","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { FaEdit } from 'react-icons/fa';\n\nimport { parseFlair } from '../functions/useful';\n\nimport Flair from './Styled/Flair';\nimport BasicButton from './Styled/BasicButton';\n \nconst StyledComp = styled.div`\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n\n    & > div#FlairHelp {\n        width: 100%;\n        text-align: center;\n    }\n\n    & > span {\n        display: inline-block;\n        margin: 2px;\n    }\n\n    @media screen and (max-width: 700px) {\n        justify-content: start;\n        padding: 5px;\n    }\n`\n\nconst FlairList = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const posts = useSelector(state => state.posts);\n    const flairs = useSelector(state => state.flairs);\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n    const currentSearch = useSelector(state => state.currentSearch);\n\n    const [subFlairs, setSubFlairs] = useState({});\n    const [editFlairs, setEditFlairs] = useState(false);\n\n    //if posts change, check through and update flairs if needed\n    useEffect(() => {\n        let savedFlairs = flairs[currentSub];\n        if (savedFlairs === undefined) savedFlairs = {};\n\n        let changedFlairs = false;\n        posts.forEach(post => {\n            if (post.subreddit.toLowerCase() !== currentSub.toLowerCase()) return;\n    \n            let flairName = post.link_flair_text;\n            if (!flairName) return;\n            if (flairName.trim().length === 0) return;\n\n            if (savedFlairs[flairName] === undefined) {\n                changedFlairs = true;\n                savedFlairs[flairName] = {\n                    link_flair_text: post.link_flair_text,\n                    link_flair_background_color: post.link_flair_background_color,\n                    link_flair_text_color: post.link_flair_text_color\n                }\n            }\n        });\n    \n        if (changedFlairs) {\n            flairs[currentSub] = savedFlairs;\n            dispatch({type: 'SET_FLAIRS', payload: flairs});\n        }\n\n        setSubFlairs(savedFlairs);\n        setEditFlairs(false);\n    }, [dispatch, posts]);\n\n    const onToggleFlairHidden = (flairName) => {\n        let subFlairsCopy = {...subFlairs};\n        let flair = subFlairsCopy[flairName];\n        flair.hidden = !flair.hidden;\n        dispatch({type: 'SET_FLAIRS', payload: flairs});\n        setSubFlairs(subFlairsCopy);\n    }\n\n    const onClickFlair = (flairName) => () => {\n        if (editFlairs) {\n            onToggleFlairHidden(flairName);\n            return;\n        }\n\n        //if already searching for this flair, don't need to do anything\n        if (decodeURI(currentSearch) === `flair_name:\"${flairName}\"`) return;\n        \n        //base flair sorting on current post sort. I user is looking at new posts, search should use new, otherwise use top (relevant not needed for flair searching)\n        let sorting = currentSort === 'new' ? 'new' : 'top';\n        history.push(`/${currentSub}/${currentSort}?search=${`flair_name:\"${flairName}\"`}&searchSort=${sorting}&searchSub=${true}&searchForSubs=${false}`);\n    }  \n\n    const onToggleEditMode = () => {\n        setEditFlairs(!editFlairs);\n    }\n\n    if (Object.values(subFlairs).length === 0) return null;\n\n    return (\n        <StyledComp>\n            {\n                editFlairs ? <div id='FlairHelp'>Click a flair to hide or show it.</div> : null\n            }\n            {\n                Object.values(subFlairs).map(flair => {\n                    if (!flair.link_flair_text) return;\n                    //get flair details\n                    let flairText = parseFlair(flair.link_flair_text);\n                    let flairColor = flair.link_flair_text_color;\n                    let flairBgColor = flair.link_flair_background_color;\n                    \n                    if (!flairBgColor || flairBgColor?.length === 0) {\n                        flairBgColor = 'white';\n                        flairColor = 'dark';\n                    }\n\n                    if (editFlairs && flair.hidden) {\n                        flairBgColor = 'white';\n                        flairColor = 'dark';\n                    }\n\n                    if (!editFlairs && flair.hidden) return null;\n\n                    return <Flair \n                                key={`flair-${flairText}-${flair.hidden}-${flairBgColor}`} \n                                dim={flair.hidden} color={flairColor} backgroundColor={flairBgColor} \n                                onClick={onClickFlair(flair.link_flair_text)}>\n                                    {flairText}\n                            </Flair>\n                })\n            }\n            <BasicButton small={true} noBorder={true} onClick={onToggleEditMode}>{editFlairs ? 'Done' : <FaEdit style={{position: 'relative', top: '2px'}}/>}</BasicButton>\n        </StyledComp>\n    );\n}\n\nexport default FlairList;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { MdSettings } from 'react-icons/md';\nimport { FaFilter, FaSearch, FaSortAmountDown } from 'react-icons/fa';\n\nimport SubList from './SubList';\nimport SortMenu from './SortMenu';\nimport UserSortMenu from './UserSortMenu';\nimport CommentSortMenu from './CommentSortMenu';\nimport SearchMenu from './SearchMenu';\nimport SaveList from './SaveList';\nimport Settings from './Settings/Settings';\nimport FlairList from './FlairList';\n\nconst StyledTopMenu = styled.div`\n    border-bottom: 1px solid red;\n    position: fixed;\n    width: 100%;\n    background-color: black;\n    z-index: 6;\n\n    & > div#settingsBtn, & > div#filterBtn, & > div#searchBtn, & > div#sortBtn {\n        float: right;\n        border-right: none;\n        border-left: 1px solid gray;\n        font-size: 1.2em;\n        height: 35px;\n\n        & > svg {\n            position: relative;\n            top: 0px;\n        }\n    }\n\n    & > div#settingsBtn {\n        font-size: 1.4em;\n\n        & > svg {\n            top: -2px;\n        }\n    }\n`;\n\nconst MenuButton = styled.div`\n    display: inline-block;\n    padding: 8px;\n    border-right: 1px solid gray;\n    min-width: 50px;\n    text-align: center;\n    background-color: ${props => props.selected ? 'gray' : 'none'};\n`;\n\nconst Dropdown = styled.div`\n    position: fixed;\n    width: ${props => props.width ? props.width : '250px'};\n    background-color: black;\n    z-index: 5;\n    top: 35px;\n    border-right: 1px solid red;\n    border-bottom: 1px solid red;\n    max-height: calc(100% - 50px);\n    overflow: scroll;\n    ${ props => props.right \n            ? 'right: 0px; border-left: 1px solid red; border-right: none;' \n            : '' };\n`;\n\nconst TopMenu = ({onBackClick}) => {\n    const dispatch = useDispatch();\n\n    const searchMenuOpen = useSelector(state => state.searchMenuOpen);\n    const onClickSearch = () => searchMenuOpen ? dispatch({type: 'CLOSE_SEARCH'}) : dispatch({type: 'OPEN_SEARCH'});\n\n    const subMenuOpen = useSelector(state => state.subMenuOpen);\n    const onClickSubs = () => subMenuOpen ? dispatch({type: 'CLOSE_SUBS'}) : dispatch({type: 'OPEN_SUBS'});\n\n    const sortMenuOpen = useSelector(state => state.sortMenuOpen);\n    const onClickSort = () => sortMenuOpen ? dispatch({type: 'CLOSE_SORT'}) : dispatch({type: 'OPEN_SORT'});\n\n    const saveMenuOpen = useSelector(state => state.saveMenuOpen);\n    const saved = useSelector(state => state.saved);\n    const onClickSave = () => saveMenuOpen ? dispatch({type: 'CLOSE_SAVED'}) : dispatch({type: 'OPEN_SAVED'});\n\n    const settingsMenuOpen = useSelector(state => state.settingsMenuOpen);\n    const onClickSettings = () => settingsMenuOpen ? dispatch({type: 'CLOSE_SETTINGS'}) : dispatch({type: 'OPEN_SETTINGS'});\n\n    const filterMenuOpen = useSelector(state => state.filterMenuOpen);\n    const onClickFilter = () => filterMenuOpen ? dispatch({type: 'CLOSE_FILTER'}) : dispatch({type: 'OPEN_FILTER'});\n\n    const currentPostId = useSelector(state => state.currentPostId);\n    const currentSub = useSelector(state => state.currentSub);\n\n    return (\n        <React.Fragment>\n            <StyledTopMenu>\n                <MenuButton onClick={onClickSubs} selected={subMenuOpen}>Subs</MenuButton>\n                { saved.length > 0 ? <MenuButton onClick={onClickSave} selected={saveMenuOpen}>Saved</MenuButton> : null }\n                { currentPostId.length > 0 ? <MenuButton onClick={onBackClick}>Back</MenuButton> : null }\n                <MenuButton id='sortBtn' onClick={onClickSort} selected={sortMenuOpen}><FaSortAmountDown/></MenuButton>\n                <MenuButton id='searchBtn' onClick={onClickSearch} selected={searchMenuOpen}><FaSearch/></MenuButton>\n                <MenuButton id='filterBtn' onClick={onClickFilter} selected={filterMenuOpen}><FaFilter/></MenuButton>\n                <MenuButton id='settingsBtn' onClick={onClickSettings} selected={settingsMenuOpen}><MdSettings/></MenuButton>\n            </StyledTopMenu>\n            { saveMenuOpen ? <Dropdown width=\"300px\"><SaveList/></Dropdown> : null }\n            { subMenuOpen ? <Dropdown><SubList/></Dropdown> : null }\n            { sortMenuOpen && currentSub === 'user' ? <Dropdown right={true}><UserSortMenu/></Dropdown> : null }\n            { sortMenuOpen && currentSub !== 'user' && currentPostId.length === 0 ? <Dropdown right={true}><SortMenu/></Dropdown> : null }\n            { sortMenuOpen && currentSub !== 'user' && currentPostId.length > 0 ? <Dropdown right={true}><CommentSortMenu/></Dropdown> : null }\n            { searchMenuOpen ? <Dropdown right={true}><SearchMenu/></Dropdown> : null }\n            { settingsMenuOpen ? <Dropdown right={true}><Settings/></Dropdown> : null }\n            { filterMenuOpen ? <Dropdown right={true}><h3 style={{textAlign: 'center'}}>Flair Filters</h3><FlairList/></Dropdown> : null }\n        </React.Fragment>\n    );\n};\n\nexport default TopMenu;","import styled from 'styled-components';\n\nconst PostTitle = styled.div`\n    margin-top: 10px;\n    padding-right: 5px;\n\n    & :hover {\n        cursor: pointer;\n    }\n\n    & > span:last-child {\n        word-break: break-word;\n    }\n\n    @media screen and (max-device-width: 600px){\n        font-size: 0.9em;\n    }\n`;\n\nexport default PostTitle;","import styled from 'styled-components';\n\nconst PostTextGroup = styled.div`\n    display: flex;\n    flex-direction: column; \n    height: 100%;\n    align-content: center;\n\n    & > div {\n        margin-top: auto;\n        margin-bottom: auto;\n    }\n`;\n\nexport default PostTextGroup;","import styled from 'styled-components';\n\nconst PostDetails = styled.div`\n    font-size: 0.9em;\n    color: gray;\n    margin-top: 5px;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nexport default PostDetails;","import styled from 'styled-components';\n\nconst PostExpand = styled.div`\n    display: inline-flex;\n    position: relative;\n    float: right;\n    border-bottom: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    border-left: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    color: gray;\n    width: 32px;\n    height: 32px;\n\n    & > svg {\n        margin: auto;\n    }\n\n    &:hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nexport default PostExpand;","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst StyledComp = styled.div`\n    border-bottom: 1px solid #545452;\n    margin-bottom: 5px;\n    padding: 30px;\n    background-color: #545452;\n    text-align: center;\n\n    & > span {\n        border: 1px solid white;\n        border-radius: 5px;\n        padding: 10px;\n    }\n\n    & > span:hover {\n        cursor: pointer;\n    }\n`;\n\nconst Spoiler = ({children, spoiler}) => {\n    const [showSpoiler, setShowSpoiler] = useState(false);\n\n    const onClickShow = () => {\n        setShowSpoiler(true);\n    }\n\n    if (spoiler && !showSpoiler) return <StyledComp><span onClick={onClickShow}>Show Spoiler</span></StyledComp>\n    else return <div>{children}</div>\n}\n\nexport default Spoiler;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaRegComment, FaChevronUp, FaChevronDown } from 'react-icons/fa';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { parseLinks, parseBodyText, parseFlair } from '../functions/useful';\n\nimport PostTitle from './Styled/PostTitle';\nimport PostTextGroup from './Styled/PostTextGroup';\nimport PostDetails from './Styled/PostDetails';\nimport PostExpand from './Styled/PostExpand';\nimport Flair from './Styled/Flair';\nimport Spoiler from './Spoiler';\n\nconst StyledPostLink = styled.div`\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    padding: 0px 0px 0px 10px;\n    margin: 5px auto;\n    width: 95%;\n    max-width: 1200px;\n    display: flex;\n    position: relative;\n`;\n\nconst PostThumbnail = styled.div`\n    min-width: 70px;\n    max-width: 70px;\n    max-height: 70px;\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-right: 10px;\n    margin-bottom: 10px;\n    margin-top: 10px;\n\n    & > img {\n        height: 70px;\n        width: auto;\n        margin: auto;\n    }\n`;\n\nconst PostComments = styled.div`\n    font-size: 0.9em;\n    display: inline-block;\n    margin-bottom: 10px;\n    cursor: pointer;\n\n    & > span > svg {\n        position: relative;\n        top: 2px;\n        margin-left: 2px;\n    }\n`;\n\nconst PostBody = styled.div`\n    padding: 5px;\n    overflow: hidden;\n\n    & img {\n        max-width: 95%;\n        max-height: 900px;\n    }\n\n    p.bodyImage {\n        max-width: fit-content;\n\n        & img {\n            max-width: 100%;\n        }\n    \n        & span {\n            display: block;\n            font-size: 0.8em;\n            color: #AAA;\n            text-align: center;\n        }\n    }\n\n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n\n    & a {\n     color: rgb(0, 225, 255);\n    }\n\n    & .embedly-card-hug {\n        background-color: white;\n        margin: 5px !important;\n    }\n\n    & .md-spoiler-text {\n        display: inline-block;\n        background-color: gray;\n        color: gray;\n        transition: 0.3s;\n    }\n\n    & .md-spoiler-text:hover {\n        background-color: transparent;\n        color: white;\n        transition: 1s;\n    }\n\n    & blockquote {\n        color: #AAA;\n        border-left: 2px solid #333;\n        padding-left: 10px;\n        margin-inline-start: 10px;\n    }\n`;\n\nconst SpoilerTag = styled.span`\n    background-color: red;\n    margin-right: 10px;\n    font-weight: bold;\n    padding: 2px;\n    text-transform: uppercase;\n    font-size: 0.8em;\n`;\n\nconst PostLink = ({ post, onClickLink, currentSub, currentSort, onClickFlair=()=>{} }) => {\n    const [expanded, setExpanded] = useState(false);\n\n    const onToggleExpand = () => {\n        setExpanded(!expanded);\n    }\n\n    if (post === undefined) return <span></span>;\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), post.created*1000);\n\n    //set whether to show a thumbnail or not\n    let showThumbnail = false;\n    if (/(.jpg|.png|.bmp|.jpeg)/.test(post.thumbnail) === true) showThumbnail = true;\n\n    //make sure any links within the body open in a new tab\n    post.body = parseLinks(post.body, true);\n    post.title = parseBodyText(post.title);\n\n    //decide whether to show image preview in body\n    let bodyContent = <PostBody dangerouslySetInnerHTML={{__html: post.body}}></PostBody>;\n    let bodyHasImage = false;\n    if (post.url.match(/.(jpg|png|bmp|gif|jpeg)$/)){\n        bodyContent = (<PostBody><img src={post.url} alt=\"Preview user linked to\" /></PostBody>);\n        bodyHasImage = true;\n    }\n\n    //decide whether to show embeded media\n    if (post.media.length > 0){\n        if (post.body.length > 0) post.media += \"<br/>\"+post.body;\n        let media = parseLinks(post.media);\n        bodyContent = <PostBody dangerouslySetInnerHTML={{__html: media}}></PostBody>;\n        bodyHasImage = true;\n    }\n\n    //show embedded reddit video\n    if (post.url.includes('v.redd.it')) {        \n        let url = `https://www.reddit.com${post.permalink}?ref=share&ref_source=embed`;\n        bodyContent = <PostBody>\n            <blockquote className=\"reddit-card\">\n                <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{post.title}</a>\n            </blockquote>\n        </PostBody>;\n        bodyHasImage = true;\n    }\n\n    //decide whether to show an open button for post body\n    let openBtn = true;\n    if (post.body.length === 0 && bodyHasImage === false) openBtn = false;\n    \n    //check if sticked and add another class\n    let stickied = post.stickied ? true : false;\n\n    //get flair\n    let flair = parseFlair(post.link_flair_text);\n    let flairColor = post.link_flair_text_color;\n    let flairBgColor = post.link_flair_background_color;\n    if (!flairBgColor || flairBgColor?.length === 0) {\n        flairBgColor = 'white';\n        flairColor = 'black';\n    }\n\n    return (\n        <StyledPostLink stickied={stickied}>\n            { showThumbnail ? <PostThumbnail><img src={post.thumbnail} alt=\"Thumbnail\"/></PostThumbnail> : null }\n            <div style={ showThumbnail ? {width: '100%', maxWidth: 'calc(100% - 80px)'} : {width: '100%', maxWidth: '100%'}}>\n                { openBtn ? <PostExpand onClick={onToggleExpand} stickied={stickied}>{ expanded ? <FaChevronUp/> : <FaChevronDown/> }</PostExpand> : null }\n                <PostTextGroup>\n                    <div>\n                        <PostTitle>\n                            { flair.length > 0 ? <Flair color={flairColor} backgroundColor={flairBgColor} onClick={onClickFlair(post.link_flair_text)}>{flair}</Flair> : null }\n                            <span onClick={onClickLink(`/${currentSub}/comments/${post.id}`)}>{post.title}</span>\n                        </PostTitle>\n                        <PostDetails>\n                            <NavLink to={`/${post.subreddit}/${currentSort}`}>{post.subreddit}</NavLink>{ post.url.includes('v.redd.it') ? <span> - video</span> : <span> - <a href={post.url} target=\"_blank\" rel='noreferrer noopener'>{post.domain}</a></span> } - <span>{dateString}</span>\n                        </PostDetails>\n                        { expanded ? <Spoiler spoiler={post.spoiler}>{bodyContent}</Spoiler> : null }\n                        <div>\n                            { post.spoiler ? <SpoilerTag>Spoiler</SpoilerTag> : null }\n                            <PostComments><span onClick={onClickLink(`/${currentSub}/comments/${post.id}`)}>{post.num_comments} <FaRegComment/></span></PostComments>\n                            <span style={{marginLeft: '15px'}}><a href={`https://www.reddit.com${post.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Open on Reddit</a></span>\n                        </div>\n                    </div>\n                </PostTextGroup>\n            </div>\n        </StyledPostLink>\n    );\n}\n\nconst areEqual = (prevProps, nextProps) => {    \n    if (prevProps.post.id === nextProps.post.id) return true;\n    return false;\n}\n\nexport default React.memo(PostLink, areEqual);","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { FaPlus, FaChevronDown, FaChevronUp } from 'react-icons/fa';\nimport { formatDistanceStrict } from 'date-fns';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { parseLinks } from '../functions/useful';\n\nimport PostTitle from './Styled/PostTitle';\nimport PostTextGroup from './Styled/PostTextGroup';\nimport PostDetails from './Styled/PostDetails';\nimport PostExpand from './Styled/PostExpand';\n\nconst StyledPostLink = styled.div`\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    padding: 0px 0px 0px 10px;\n    margin: 5px auto;\n    width: 95%;\n    max-width: 1200px;\n    display: flex;\n    position: relative;\n`;\n\nconst AddSubBtn = styled.div`\n    width: 45px;\n    height: 45px;\n    margin: 5px 5px 5px -5px;\n    border: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    display: flex;\n    align-items: center;\n\n    & > svg {\n        font-size: 1.5em;\n        margin: auto;\n    }\n\n    :hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n`;\n\nconst SubLink = ({ sub, currentSort }) => {\n    const dispatch = useDispatch();\n    const [expanded, setExpanded] = useState(false);\n    const subs = useSelector(state => state.subs);\n    const setSubs = (val) => dispatch({type: 'SET_SUBS', payload: val});\n\n    const onToggleExpand = () => {\n        setExpanded(!expanded);\n    }\n\n    if (sub === undefined) return <span></span>;\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), sub.created*1000);\n\n    let description = parseLinks(sub.description);\n\n    //decide whether to show an open button for post body\n    let openBtn = true;\n    if (description.length === 0) openBtn = false;    \n\n    const addSub = () => {\n        let newSubArr = [...subs, sub.subName];  \n        setSubs(newSubArr);\n    }\n\n    const alreadySubbed = subs.reduce((a,c) => {\n        if (c.toLowerCase() === sub.subName.toLowerCase()) a++;\n        return a;\n    }, 0);\n\n    return (\n        <StyledPostLink stickied={alreadySubbed}>\n            { !alreadySubbed ? <AddSubBtn onClick={addSub} stickied={alreadySubbed}><FaPlus/></AddSubBtn> : null }\n            <div style={{width: '100%', maxWidth: '100%'}}>\n                { openBtn ? <PostExpand onClick={onToggleExpand} stickied={alreadySubbed}>{ expanded ? <FaChevronUp/> : <FaChevronDown/> }</PostExpand> : null }\n                <PostTextGroup>\n                    <div>\n                        <PostTitle><NavLink to={`/${sub.subName}/${currentSort}`}>{sub.title}</NavLink></PostTitle>\n                        <PostDetails>\n                            <span>{sub.subName}</span> - <span>{sub.subscribers > 0 ? sub.subscribers : 0} {sub.subscribers !== 1 ? 'members' : 'member'}</span> - <span>{dateString}</span>\n                        </PostDetails>\n                        { expanded ? <span dangerouslySetInnerHTML={{__html: description}}></span> : null }\n                    </div>\n                </PostTextGroup>\n            </div>\n        </StyledPostLink>\n    );\n}\n\nconst areEqual = (prevProps, nextProps) => {    \n    if (prevProps.sub.id === nextProps.sub.id) return true;\n    return false;\n}\n\nexport default React.memo(SubLink, areEqual);","import React from 'react';\nimport styled from 'styled-components';\n\nimport Comment from './Comment';\n\nconst StyledCommentList = styled.div`\n    margin-top: 10px;\n\n    & > div {\n        margin-bottom: 5px;\n    }\n`;\n\nconst CommentList = ({comments, author}) => {\n    if (comments.length === 0) return null;\n\n    return (\n        <StyledCommentList id=\"commentList\">\n            {\n                comments.map(comment => {\n                    return <Comment key={comment.id} comment={comment} author={author}/>\n                })\n            }\n        </StyledCommentList>\n    );\n}\n\nexport default CommentList;","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { parseLinks, getMoreComments, parseBodyText } from '../functions/useful';\n\nimport CommentList from './CommentList';\n\nconst StyledComment = styled.div`\n    padding: 5px;\n    padding-bottom: 0px;\n    border-left: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    border-top: 1px solid ${props => props.stickied ? '#50ec11' : 'red'};\n    margin-bottom: 0px;\n    transition: border-left 0.5s;\n\n    ${props => {\n        if (props.single) {\n            return `\n                border: 1px solid red;\n                width: 95%;\n                max-width: 1200px;\n                margin: 5px auto;\n            `;\n        }\n    }}\n\n    & a {\n        color: rgb(0, 225, 255);\n    }\n\n    & pre {\n        overflow: scroll;\n    }\n\n    :hover {\n        border-left: 1px solid #fcc203;\n    }\n\n    & .md-spoiler-text {\n        display: inline-block;\n        background-color: gray;\n        color: gray;\n        transition: 0.3s;\n    }\n\n    & .md-spoiler-text:hover {\n        background-color: transparent;\n        color: white;\n        transition: 1s;\n    }\n\n    & blockquote {\n        color: #AAA;\n        border-left: 2px solid #333;\n        padding-left: 10px;\n        margin-inline-start: 10px;\n    }\n`;\n\nconst CommentClose = styled.span`\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst CommentAuthor = styled.a`\n    color: white !important;\n\n    ${props => props.original ? `\n        color: #059afe !important; \n        font-weight: bold;\n    ` : ''};\n`;\n\nconst CommentFooter = styled.div`\n    font-size: 0.8em;\n    margin-bottom: 5px;\n    color: gray;\n\n    & > span:hover, & > div:hover {\n        cursor: pointer;\n    }\n\n    & > div {\n        margin-top: 10px;\n        font-size: 1.2em;\n        display: inline-block;\n    }\n    \n    & > a {\n        color: gray;\n    }\n`;\n\nconst CommentLinkTitle = styled.div`\n    margin-bottom: 10px;\n\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst Comment = ({comment, author, single=false, onClickLink}) => {  \n    const [closed, setClosed] = useState(false);\n    const extraComments = useSelector(state => state.extraComments);\n    const permalinkUrl = useSelector(state => state.permalinkUrl);\n    const currentSub = useSelector(state => state.currentSub);\n\n    let permalinkId = permalinkUrl.split('/')[1];\n    let permalinkComment = permalinkId === comment.id;\n\n    //test if extra comments have been loaded for this one\n    let extras = extraComments.find(obj => obj.id === comment.id && comment.kind !== 'more');\n    if (extras !== undefined) {                \n        extras = extras.replies;\n    } else {\n        extras = [];\n    }\n\n    //if there are any replies to this comment, create a new Comments object (will work recursively)\n    let replies = \"\";\n    if (extras.length > 0) {\n        replies = <CommentList comments={extras} author={author}/>;\n    } else if (comment.replies.length > 0) {\n        replies = <CommentList comments={comment.replies} author={author}/>;\n    }\n\n    let body_html = parseLinks(comment.body_html);\n\n    //get relative time string\n    let dateString = comment.created_utc !== undefined ? formatDistanceStrict(new Date(), comment.created_utc*1000) : '';\n\n    let pointString = comment.score === 1 || comment.score === -1 ? 'point' : 'points';\n\n    const toggleClosed = () => {\n        setClosed(!closed);\n    }        \n\n    const getMore = () => {\n        getMoreComments(comment.id, comment.permalink);\n    }\n\n    //dont' currently support getting more top level comments, so don't show anything\n    if (comment.kind === 'more' && comment.permalink.length === 0) return null;\n\n    return (\n        <StyledComment single={single} stickied={comment.stickied}>\n            { single ? <CommentLinkTitle onClick={onClickLink(`/${comment.subreddit}/comments/${comment.link_id.replace('t3_','')}`)}>{parseBodyText(comment.link_title)}<span style={{color: 'gray'}}> | {comment.subreddit}</span> </CommentLinkTitle> : null }\n            { single ? null : <CommentClose onClick={toggleClosed}>{ closed ? '[ + ] ' : '[ - ] ' }</CommentClose> }\n            { single ? null : <CommentAuthor original={comment.author === author} href={`#/user/${comment.author}`}>{comment.author}</CommentAuthor> }\n            { comment.kind === 'more' ? null : <span style={{color: 'gray'}}> {single ? '' : '|'} {single && currentSub !== 'user' ? comment.author+' | ' : ''} {comment.score} {pointString}{dateString.length > 0 ? ` | ${dateString}` : ''}</span> }\n            { closed ? null : <div dangerouslySetInnerHTML={{ __html: body_html }} style={permalinkComment ? {backgroundColor: 'rgba(150,150,0,0.3)'} : {}}></div> }\n            { closed ? null : (\n                <CommentFooter>\n                    { comment.kind !== 'more' ? <a href={`https://www.reddit.com/${comment.permalink}`} target=\"_blank\" rel=\"noreferrer noopener\">Permalink</a> : null }\n                    { single ? <span onClick={onClickLink(comment.permalink.replace('r/',''))}> | Go to comment</span> : null }\n                    { comment.kind === 'more' ? <div onClick={getMore}>Load More</div> : null }\n                </CommentFooter>) }\n            { closed ? null : replies }\n        </StyledComment>\n    );\n}\n\nexport default Comment;","import styled from 'styled-components';\n\nconst LoadingSpinner = styled.div`\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    border: 3px solid red;\n    border-top: 0px;\n    border-bottom: 0px;\n    margin: auto;\n    margin-top:40px;\n    position: relative;\n    animation-name: rotate;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-timing-function: linear;\n\n    &:after {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 2px;\n        left: 2px;\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-left: 0px;\n        border-right: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 0.5s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n        animation-direction: reverse;\n    }\n\n    &:before {\n        content:'';\n        display: block;\n        position: absolute;\n        top: 10px;\n        left: 4px;\n        width: 30px;\n        height: 30px;\n        border-radius: 50%;\n        border: 3px solid red;\n        border-top: 0px;\n        border-bottom: 0px;\n        margin: auto;\n        animation-name: rotate;\n        animation-duration: 1s;\n        animation-iteration-count: infinite;\n        animation-timing-function: linear;\n    }\n\n    @keyframes rotate {\n        from {\n            transform: rotate(0deg);\n        }\n        \n        to {\n            transform: rotate(360deg);\n        }\n    }\n`;\n\nexport default LoadingSpinner;","import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { getPostList } from '../functions/useful';\n\nimport PostLink from './PostLink';\nimport SubLink from './SubLink';\nimport Comment from './Comment';\nimport LoadingSpinner from './Styled/LoadingSpinner';\n\nconst PostList = ({onClickLink}) => {\n    const history = useHistory();\n\n    const posts = useSelector(state => state.posts);\n    const noPosts = useSelector(state => state.noPosts);\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const currentSearch = useSelector(state => state.currentSearch);\n    const noMorePosts = useSelector(state => state.noMorePosts);\n    const loadMorePosts = () => getPostList(true);\n\n    if (noPosts) return <div style={{textAlign:'center'}}>No Posts Found</div>\n    if (posts.length === 0 && currentPostId.length === 0) return <div><LoadingSpinner/></div>;\n\n    let hide = currentPostId.length > 0;\n    let position = hide ? 'absolute' : 'relative';\n    let top = hide ? '-1000000px' : '0px';\n    let right = hide ? '-20000px' : '0px';\n    let hasMore = hide || noMorePosts ? false : true;  \n\n    const onClickFlair = (flair) => () => {\n        //if already searching for this flair, don't need to do anything\n        if (decodeURI(currentSearch) === `flair_name:\"${flair}\"`) return;\n        \n        //base flair sorting on current post sort. I user is looking at new posts, search should use new, otherwise use top (relevant not needed for flair searching)\n        let sorting = currentSort === 'new' ? 'new' : 'top';\n        history.push(`/${currentSub}/${currentSort}?search=${`flair_name:\"${flair}\"`}&searchSort=${sorting}&searchSub=${true}&searchForSubs=${false}`);\n    }  \n\n    return (\n        <div style={{margin: 'auto', position: position, top: top, right: right, marginBottom: '20px'}}>\n            <InfiniteScroll\n                dataLength={posts.length} //This is important field to render the next data\n                next={loadMorePosts}\n                hasMore={hasMore} //change to false when don't want to load more or nothing left\n                loader={<div style={{textAlign: 'center', margin: '10px'}}>Loading More...</div>}\n                scrollableTarget={'#mainPage'}\n                scrollThreshold={'500px'}\n            >\n            {\n                posts.map(post => {\n                    if (post.type === 'comment') return <Comment key={post.id} comment={post} author='' single={true} onClickLink={onClickLink}/>;\n                    if (post.type === 'sub') return <SubLink key={post.id} sub={post} currentSort={currentSort}/>;\n                    if (currentSub === 'user') return <PostLink key={post.id} post={post} currentSub={post.subreddit} currentSort={'hot'} onClickLink={onClickLink} onClickFlair={onClickFlair}/>;\n                    return <PostLink key={post.id} post={post} currentSub={currentSub} currentSort={currentSort} onClickLink={onClickLink} onClickFlair={onClickFlair}/>;\n                })\n            }\n            {\n                noMorePosts ? <div style={{textAlign: 'center', margin: '10px'}}>No More Posts</div> : null\n            }\n            </InfiniteScroll>\n        </div>\n    );\n}\n\nexport default PostList;","import React, { useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport styled from 'styled-components';\nimport { FaChevronDown } from 'react-icons/fa'\n\nimport { parseBodyText } from '../functions/useful';\n\nimport LoadingSpinner from './Styled/LoadingSpinner';\n\nconst StyledComp = styled.div`\n    & > div#mainImageOuter {\n        position: relative;\n    }\n\n    & > div#caption {\n        text-align: center;\n        font-size: 0.9em;\n        margin-bottom: 5px;\n    }\n\n    & > div#thumbnails {\n        display: flex;\n        max-width: 100%;\n        justify-content: center;\n        align-items: center;\n        flex-flow: wrap;\n    }\n\n    & > div#thumbnails > img {\n        margin: 5px;\n        user-select: none;\n    }\n\n    & > div#thumbnails > img:hover {\n        cursor: pointer;\n    }\n\n    & > div#thumbnails > img.selected {\n        border: 1px solid red;\n    }\n\n    & #galleryInner {\n        padding-top: 50%;\n    }\n    \n    & #galleryImgDiv {\n        position: absolute;\n        top: 0px;\n        left: 0px;\n        width: 100%;\n        height: 100%;\n        text-align: center;\n        display: flex;\n        justify-content: center;\n    }\n\n    & #galleryImgDiv a {\n        align-self: center;\n        width: calc(100% - 100px);\n        height: 100%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n    \n    & #galleryImgDiv img {\n        max-width: 100%;\n        max-height: 100%;\n        user-select: none;\n    }\n\n    & #galleryBack, & #galleryForward {\n        position: absolute;\n        top: 50%;\n        z-index: 3;\n        border-radius: 50%;\n        width: 50px;\n        height: 50px;\n        background-color: black;\n        opacity: 0.6;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        font-size: 2em;\n    }\n\n    & #galleryBack:hover, & #galleryForward:hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n\n    & #galleryBack {\n        transform: translate(0,-50%) rotate(90deg);\n        left: -15px;\n    }\n\n    & #galleryForward {\n        transform: translate(0,-50%) rotate(-90deg);\n        right: -15px;\n    }\n\n    & #galleryBack > svg, & #galleryForward > svg {\n        position: relative;\n        top: 2px;\n    }\n\n    @media screen and (max-width: 700px) {\n        & #galleryBack:hover, & #galleryForward:hover {\n            background-color: black;\n        }\n    }\n`;\n\n//function to get the url based on an index, but if that index doesn't exist, it gets the next largest image.\nconst getURL = (arr, index) => {\n    let limit = 6;\n    while (true && limit > 0) {\n        if (arr[index] !== undefined) return parseBodyText(arr[index].u);\n        else index--;\n        limit--;\n    }\n}\n\nconst Gallery = ({data, extraData}) => {\n    let firstId = extraData && extraData.items.length > 0 ? extraData.items[0].media_id : '';\n    const [id, setId] = useState(firstId);\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n    const level4 = useMediaQuery({ maxWidth: 960 });\n    const level5 = useMediaQuery({ maxWidth: 2560 });\n    let numberOfImages = extraData.items ? extraData.items.length : 0;\n    const [showSpinner, setShowSpinner] = useState(true);\n\n    if (!data) return <p>Post has been removed</p>;\n\n    let sortedData = {};\n    extraData.items.forEach(item => sortedData[item.media_id] = data[item.media_id]);\n    let index = Object.keys(sortedData).indexOf(id);\n\n    let url = '';\n    if (level5) url = getURL(data[id].p, 5);\n    if (level4) url = getURL(data[id].p, 4);\n    if (isMobile) url = getURL(data[id].p, 3);\n    let fullUrl = parseBodyText(data[id].s.u);\n\n    let caption = `${index+1}/${numberOfImages}`;\n    let extraDataObj = extraData.items.find(obj => obj.media_id === id);\n    if (extraDataObj !== undefined) {\n        if (extraDataObj.caption !== undefined) caption += ' - Caption: ' + extraDataObj.caption;\n    }\n\n    const onClickThumb = (id) => () => {\n        setId(id);\n        setShowSpinner(true);\n    }\n\n    const next = () => {\n        let arr = Object.keys(sortedData);\n        let index = arr.indexOf(id);\n        let next = index+1;\n        if (next >= arr.length) next = 0;\n        let nextId = arr[next];\n        setId(nextId);\n        setShowSpinner(true);\n    }\n\n    const previous = () => {\n        let arr = Object.keys(sortedData);\n        let index = arr.indexOf(id);\n        let prev = index-1;\n        if (prev < 0) prev = arr.length-1;\n        let prevId = arr[prev];\n        setId(prevId);\n        setShowSpinner(true);\n    }\n\n    const onImageLoad = () => {\n        setShowSpinner(false);\n    }\n\n    return (\n        <StyledComp>\n            { caption.length > 0 ? <div id=\"caption\">{ caption }</div> : null }\n            <div id=\"mainImageOuter\">\n                <div id=\"galleryInner\">\n                    <div onClick={previous} id=\"galleryBack\"><FaChevronDown/></div>\n                    <div onClick={next} id=\"galleryForward\"><FaChevronDown/></div>\n                    { showSpinner ? <LoadingSpinner style={{position: 'absolute', left: 'calc(50% - 25px)', top: 'calc(50% - 50px)', zIndex: '0'}}/> : null }\n                    <div id=\"galleryImgDiv\">\n                        <a key={id} href={fullUrl} target=\"_blank\" rel=\"noopener noreferrer\"><img src={url} alt=\"Gallery Main\" onLoad={onImageLoad}/></a>\n                    </div>\n                </div>\n            </div>\n            <div id=\"thumbnails\">\n            {\n                isMobile ? null : extraData.items.map((obj,i) => {\n                    let dataObj = data[obj.media_id];\n                    return <img key={obj.id} src={parseBodyText(dataObj.p[0].u)} onClick={onClickThumb(obj.media_id)} alt=\"Thumbnail\" className={id === obj.media_id ? 'selected' : ''}/>\n                })\n            }\n            </div>\n        </StyledComp>\n    );\n}\n\nexport default Gallery;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledError = styled.div`\n    margin: 10px;\n    text-align: center;\n\n    h2 {\n        margin-top: 20px;\n    }\n\n    button {\n        border: 1px solid red;\n        background-color: black;\n        color: white;\n        font-size: 1.5em;\n        margin-top: 20px;\n    }\n`;\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: '' };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({error: error.message});\n  }\n\n  resetError = () => {\n        this.setState({hasError: false});\n        this.props.history.push('/');\n    }\n\n  render() {\n    if (this.state.hasError) {\n        return (\n            <StyledError>\n                { this.props.history !== undefined ? <h2>Sorry, something went wrong.</h2> : <h2>This Component Could Not Be Loaded</h2> }\n                <div>Error Message: {this.state.error}</div>\n                { this.props.history !== undefined ? <button onClick={this.resetError}>Reset</button> : null }\n            </StyledError>\n        );\n    }\n\n    return this.props.children; \n  }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { formatDistanceStrict } from 'date-fns';\n\nimport { parseBodyText, getLocalUrl } from '../functions/useful';\nimport { parsePostBody } from './Post';\n\nconst StyledComp = styled.div`\n    border: 1px solid gray;\n    border-radius: 5px;\n    margin: 5px;\n    margin-top: 10px;\n    padding: 10px;\n\n    & > div:first-child {\n        border-bottom: 1px solid gray;\n        padding: 5px;\n\n        & > a {\n            display: block;\n            color: white;\n            font-weight: bold;\n        }\n\n        & > div {\n            margin-top: 5px;\n            color: gray;\n            text-align: left;\n            margin-bottom: 5px;\n\n            & a {\n                color: gray;\n            }\n        }\n    }\n\n    & > div:last-child {\n        border-bottom: none;\n        padding-bottom: 0px;\n    }\n\n    @media screen and (max-width: 700px) {\n        margin: 0px;\n    }\n`\n\nconst Crosspost = ({data}) => {\n    const currentSub = useSelector(state => state.currentSub);\n    const currentPostId = useSelector(state => state.currentPostId);\n\n    const { title, selftext_html, url, media, media_embed, media_metadata, is_gallery, gallery_data, author, created_utc, permalink, num_comments } = data;\n    let body = parseBodyText(selftext_html);\n    let bodyTag = parsePostBody(body, url, media, media_embed, permalink, title, currentSub, media_metadata, is_gallery, gallery_data);  \n\n    //a crosspost will always be a local url, so use that as link\n    let localUrl = getLocalUrl(permalink, currentSub, currentPostId);\n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), created_utc*1000);\n\n    return (\n        <StyledComp>\n            <div>\n                <a href={localUrl}>{title}</a>\n                <div><a href={`#/user/${author}`}>{author}</a> - {num_comments} comments - {dateString}</div>\n            </div>\n            { bodyTag }\n        </StyledComp>\n    );\n}\n\nexport default Crosspost;","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { formatDistanceStrict } from 'date-fns';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport { FaChevronDown } from 'react-icons/fa'\n\nimport CommentList from './CommentList';\nimport Gallery from './Gallery';\nimport Spoiler from './Spoiler';\nimport LoadingSpinner from './Styled/LoadingSpinner';\nimport ErrorBoundary from './ErrorBoundary';\nimport Crosspost from './Crosspost';\n\nimport { parseBodyText, parseLinks, updatePostDetails, getComments, getLocalUrl } from '../functions/useful';\n\nconst StyledPost = styled.div`\n    background-color: black;\n    padding: 20px;\n    width: 100%;\n    max-width: 1200px;\n    margin: auto;\n    margin-bottom: 30px;\n\n    & h1 {\n        text-align: left;\n        margin-bottom: 10px;\n    }\n\n    & > div > h2 {\n        word-break: break-word;\n    }\n`;\n\nconst PostDetails = styled.div`\n    color: gray;\n    text-align: left;\n    margin-bottom: 5px;\n\n    & a {\n        color: gray;\n    }\n`;\n\nconst PostBody = styled.div`\n    border-bottom: 1px solid gray;\n    margin-bottom: 5px;\n    padding-bottom: 10px;\n\n    & pre {\n        overflow: scroll;\n    }\n\n    & > img {\n        max-width: 100%;\n        margin-top: 10px;\n    }\n\n    p.bodyImage {\n        max-width: fit-content;\n\n        & img {\n            max-width: 100%;\n        }\n    \n        & span {\n            display: block;\n            font-size: 0.8em;\n            color: #AAA;\n            text-align: center;\n        }\n    }\n\n    \n    & iframe {\n        max-width: 100%;\n        margin: auto;\n        display: block;\n    }\n\n    & a {\n     color: rgb(0, 225, 255);\n    }\n\n    & h1 {\n        font-size: 1.2em;\n    }\n\n    & h2 {\n        font-size: 1.1em;\n    }\n\n    & h3 {\n        font-size: 1em;\n    }\n\n    & .embedly-card-hug {\n        background-color: white;\n        margin: 5px !important;\n    }\n\n    & .md-spoiler-text {\n        display: inline-block;\n        background-color: gray;\n        color: gray;\n        transition: 0.3s;\n    }\n\n    & .md-spoiler-text:hover {\n        background-color: transparent;\n        color: white;\n        transition: 1s;\n    }\n\n    & blockquote {\n        color: #AAA;\n        border-left: 2px solid #333;\n        padding-left: 10px;\n        margin-inline-start: 10px;\n    }\n`;\n\nconst ScrollButton = styled.div`\n    position: fixed;\n    bottom: 10px;\n    right: 10px;\n    width: 50px;\n    height: 50px;\n    border: 1px solid red;\n    background-color: black;\n    border-radius: 50%;\n    text-align: center;\n\n    & > svg {\n        position: relative;\n        top: 10px;\n        font-size: 2em;\n    }\n\n    :hover {\n        cursor: pointer;\n        background-color: gray;\n    }\n\n    @media screen and (max-width: 700px) {\n        :hover {\n            background-color: black;\n        }\n    }\n`;\n\nconst SimpleButton = styled.span`\n    :hover {\n        cursor: pointer;\n    }\n`\n\nconst Post = () => {\n    const dispatch = useDispatch();\n\n    const comments = useSelector(state => state.comments);\n    const noComments = useSelector(state => state.noComments);\n    let post = useSelector(state => state.postDetails);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const commentSort = useSelector(state => state.commentSort);\n    const currentSub = useSelector(state => state.currentSub);\n    const permalinkUrl = useSelector(state => state.permalinkUrl);\n    const showContext = useSelector(state => state.showContext);\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n\n    const saved = useSelector(state => state.saved);\n    const setSaved = (val) => dispatch({type: 'SET_SAVED', payload: val});\n\n    useEffect(() => {\n        //get quick details from posts array\n        updatePostDetails();\n        window.scrollTo(0,0); \n    }, []);\n\n    useEffect(() => {\n        //if comment sort method or post Id is changed, then get comments again using new values        \n        getComments();\n    }, [commentSort, currentPostId, permalinkUrl, showContext]);\n\n    if (post.body === undefined || post.id !== currentPostId) {\n        return <div style={{textAlign: 'center'}}><LoadingSpinner/></div>;\n    }\n\n    let {url, title, author, created, body, media, permalink, media_embed, media_metadata, is_gallery, gallery_data, spoiler, crosspost_parent_list} = post;\n\n    let localUrl = getLocalUrl(url, currentSub, currentPostId);\n    \n\n    //get parsed body tag\n    let bodyTag = parsePostBody(body, url, media, media_embed, permalink, title, currentSub, media_metadata, is_gallery, gallery_data, crosspost_parent_list);  \n\n    //get relative time string\n    let dateString = formatDistanceStrict(new Date(), created*1000);\n\n    //if URL is too long, make shorter\n    let shortUrl = url || '';\n    if (shortUrl.length > 40) shortUrl = shortUrl.substr(0,40) + '...';\n\n    //check if post is saved\n    let isSaved = saved.find(obj => obj.id === currentPostId) !== undefined;\n\n    //find the next comment that's not at the top and scroll to it\n    const scrollToNext = () => {\n        const commentDiv = document.querySelector('#commentList');\n        for (let i = 0; i < commentDiv.children.length; i++) {\n            let child = commentDiv.children[i];\n            let rect = child.getBoundingClientRect();            \n            if (rect.top < 1 || (isMobile && rect.top < 41)) continue;\n            else {\n                child.scrollIntoView();\n                //adjust for the top menu on mobile devices\n                if (isMobile) {\n                    const el = document.scrollingElement || document.documentElement;\n                    el.scrollTop -= 40;\n                }\n                break;\n            }\n        }\n    }\n\n    const onSavePost = () => {\n        let newSaved;\n        if (isSaved) {\n            newSaved = saved.filter(obj => obj.id !== post.id);\n        } else {\n            let link = `/${currentSub}/comments/${post.id}`;\n            newSaved = [...saved, {id: currentPostId, title: title, url: link, sub: currentSub}];\n        }\n\n        setSaved(newSaved);\n    }\n\n    let urlTag = <a href={url} target=\"_blank\" rel=\"noopener noreferrer\"> | Go to URL ({shortUrl})</a>;\n    if (localUrl !== undefined) urlTag = <a href={localUrl}> | Go to Post ({shortUrl})</a>;\n    if (url.includes('v.redd.it')) urlTag = <a href={`https://www.reddit.com${permalink}`} target=\"_blank\" rel=\"noopener noreferrer\"> | Video</a>;\n\n    let hasContext = comments[0] !== undefined ? comments[0].hasContext : false;\n\n    return (\n        <StyledPost>\n            <div>\n                <h2 dangerouslySetInnerHTML={{ __html: title}}></h2>\n                <PostDetails><a href={`#/user/${author}`}>{author}</a> | {dateString} { urlTag }</PostDetails>\n                <PostDetails><a href={`https://www.reddit.com${permalink}`} target=\"_blank\" rel=\"noopener noreferrer\">Open on Reddit</a> - <SimpleButton onClick={onSavePost}>{ isSaved ? 'Unsave' : 'Save' }</SimpleButton></PostDetails>\n                <Spoiler spoiler={spoiler}>\n                    { bodyTag }\n                </Spoiler>\n            </div>\n            { comments.length === 0 && noComments === false ? <LoadingSpinner/> : null }\n            { noComments ? <div>No Comments</div> : null }\n            { permalinkUrl.length > 0 ? <a href={`#/${currentSub}/comments/${currentPostId}`}>Show All Comments</a> : null }\n            { permalinkUrl.length > 0 && hasContext ? <span> - <a href={`#/${currentSub}/comments/${currentPostId}/${permalinkUrl}/?context=10000`}>Show Context</a></span> : null }\n            <CommentList comments={comments} author={author}/>\n            <ScrollButton onClick={scrollToNext}><FaChevronDown/></ScrollButton>\n        </StyledPost>\n    );\n}\n\nexport const parsePostBody = (body, url, media, media_embed, permalink, title, currentSub, media_metadata, is_gallery, gallery_data, crosspost_parent_list) => {\n    body = parseLinks(body, true);\n\n    //check for crosspost\n    if (crosspost_parent_list !== undefined) {\n        let data = crosspost_parent_list[0];\n        return <PostBody className=\"postDivBody\">\n            <Crosspost data={data}/>\n        </PostBody>\n    }\n    \n    //check for image link to url and replace body with image if so\n    let bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: body }} className=\"postDivBody\"></PostBody>;\n    if (/.(png|jpg|jpeg|bmp|gif)$/.test(url)){\n        bodyTag = <PostBody><img src={url} alt=\"Preview of content\"/></PostBody>;\n    }\n\n    //check for a live update thread\n    if (media && media.type === 'liveupdate') {        \n        let content = parseBodyText(media_embed.content);\n        content = content.replace('iframe src', 'iframe width=\"100%\" src');\n        bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: content }} className=\"postDivBody\"></PostBody>;\n        return bodyTag;\n    }\n\n    //check for media embed and replace body with this\n    if (media && media.oembed){\n        media = parseBodyText(media.oembed.html);\n        media = parseLinks(media);\n        if (body.length > 0) media += '<br/>'+body;\n        bodyTag = <PostBody dangerouslySetInnerHTML={{ __html: media }} className=\"postDivBody\"></PostBody>;\n    } else {\n        media = '';\n    }\n\n    if (is_gallery) {\n        return <PostBody className=\"postDivBody\"><ErrorBoundary><Gallery data={media_metadata} extraData={gallery_data}/></ErrorBoundary></PostBody>\n    }\n\n    if (url.includes('v.redd.it')) {\n        let url = `https://www.reddit.com${permalink}?ref=share&ref_source=embed`;\n        bodyTag = <PostBody className=\"postDivBody\">\n                    <blockquote className=\"reddit-card\">\n                        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{title}</a>\n                    </blockquote>\n                  </PostBody>\n    }\n    \n    return bodyTag;\n}\n\nexport default Post;","import styled from 'styled-components';\n\nconst SmallButton = styled.span`\n    color: gray;\n    font-size: 0.8em;\n    border: 1px solid gray;\n    border-radius: 5px;\n    padding: 2px 5px;\n    margin-left: 5px;\n\n    &:hover {\n        color: #999;\n        background-color: #222;\n        cursor: pointer;\n    }\n`\n\nexport default SmallButton;","import React from 'react';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport SmallButton from './Styled/SmallButton';\n\nconst ReloadButton = styled.span`\n    color: gray;\n\n    :hover {\n        cursor: pointer;\n        color: white;\n    }\n`;\n\nconst Header = ({heading, subHeading='', onReload}) => {\n    const history = useHistory();\n    const currentSub = useSelector(state => state.currentSub);\n    const currentSort = useSelector(state => state.currentSort);\n\n    const clearSearch = () => {\n        history.push(`/${currentSub}/${currentSort}`);\n    }\n\n    return (\n        <div>\n            <h1 style={{textAlign: 'center'}}>{heading} &nbsp;<ReloadButton onClick={onReload}>&#8635;</ReloadButton></h1>\n            { subHeading.length > 0 ? <h3 style={{textAlign: 'center'}}>{decodeURIComponent(subHeading)} <SmallButton onClick={clearSearch}>clear</SmallButton></h3> : null }\n            { heading.includes('Searching Subs:') ? <h3 style={{textAlign: 'center'}}><SmallButton onClick={clearSearch}>Cancel</SmallButton></h3> : null }\n        </div>\n    );\n};\n\nexport default Header;","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { MdSettings } from 'react-icons/md';\n\nimport SortMenu from './SortMenu';\nimport CommentSortMenu from './CommentSortMenu';\nimport UserSortMenu from './UserSortMenu';\nimport SubList from './SubList';\nimport SearchMenu from './SearchMenu';\nimport SaveList from './SaveList';\nimport Settings from './Settings/Settings';\nimport Button from './Styled/Button';\n\nconst StyledSideMenu = styled.div`\n    width: 250px;\n    border-right: 1px solid red;\n    height: 100%;\n    position: fixed;\n    overflow: scroll;\n`;\n\nconst SavedButton = styled(Button)`\n    border-top: none;\n    border-bottom: 1px solid gray;\n`;\n\nconst TopButtons = styled.div`\n    display: flex;\n    \n    & > button:first-child {\n        padding: 0px;\n        border-right: 1px solid gray;\n        width: 60px;\n        font-size: 1.4em;\n    }\n\n    & > button > svg {\n        position: relative;\n        top: 3px;\n    }\n`;\n\nconst SideMenu = () => {\n    const [showSaved, setShowSaved] = useState(false);\n    const [showSettings, setShowSettings] = useState(false);\n    const currentPostId = useSelector(state => state.currentPostId);\n    const currentSub = useSelector(state => state.currentSub);\n\n    const onClickHideSaved = () => {\n        setShowSaved(false);\n        setShowSettings(false);\n    }\n\n    const onClickShowSaved = () => {\n        setShowSaved(true);\n    }\n\n    const onClickShowSettings = () => {\n        setShowSettings(true);\n    }\n\n    if (showSettings) {\n        return (\n            <StyledSideMenu>\n                <SavedButton onClick={onClickHideSaved}>Back</SavedButton>\n                <Settings/>\n            </StyledSideMenu>\n        );\n    } else if (showSaved) {\n        return (\n            <StyledSideMenu>\n                <SavedButton onClick={onClickHideSaved}>Back</SavedButton>\n                <SaveList/>\n            </StyledSideMenu>\n        );\n    } else {\n        return (\n            <StyledSideMenu>\n                <TopButtons>\n                    <SavedButton onClick={onClickShowSettings}><MdSettings/></SavedButton>\n                    <SavedButton onClick={onClickShowSaved}>Saved Posts</SavedButton>\n                </TopButtons>\n                <SearchMenu/>\n                { currentSub === 'user' ? <UserSortMenu/> : currentPostId.length > 0 ? <CommentSortMenu/> : <SortMenu/> }\n                <SubList/>\n            </StyledSideMenu>\n        );\n    }\n}\n\nexport default SideMenu;","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useMediaQuery } from 'react-responsive';\nimport { useSelector, useDispatch, batch } from 'react-redux';\n\nimport TopMenu from './components/TopMenu';\nimport PostList from './components/PostList';\nimport FlairList from \"./components/FlairList\";\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport SideMenu from './components/SideMenu';\nimport ErrorBoundary from './components/ErrorBoundary';\n\nimport { getPostList, getComments, parseURL, parseSearch, parseFlair } from './functions/useful';\n\nconst Page = ({location, history}) => {\n    const dispatch = useDispatch();\n    const [scrollPos, setScrollPos] = useState(0);\n    const posts = useSelector(state => state.posts);\n\n    const currentSort = useSelector(state => state.currentSort);\n    const setCurrentSort = (sort) => dispatch({type: 'SET_SORT', payload: sort});\n    \n    const closeMenus = () => dispatch({type: 'CLOSE_MENUS'});\n\n    const currentSub = useSelector(state => state.currentSub);\n    const setCurrentSub = (val) => dispatch({type: 'SET_SUB', payload: val});\n\n    const currentPostId = useSelector(state => state.currentPostId);\n    const setCurrentPostId = (val) => dispatch({type: 'SET_POSTID', payload: val});\n\n    const currentUserSort = useSelector(state => state.currentUserSort);\n    const setCurrentUserSort = (val) => dispatch({type: 'SET_USER_SORT', payload: val});\n\n    const currentSearch = useSelector(state => state.currentSearch);    \n    const setCurrentSearch = (val) => dispatch({type: 'SET_CURRENT_SEARCH', payload: val});\n\n    const currentSearchSort = useSelector(state => state.currentSearchSort);\n    const setCurrentSearchSort = (val) => dispatch({type: 'SET_CURRENT_SEARCH_SORT', payload: val});\n\n    const currentSearchSub = useSelector(state => state.currentSearchSub);\n    const setCurrentSearchSub = (val) => dispatch({type: 'SET_CURRENT_SEARCH_SUB', payload: val});\n\n    const currentSearchForSubs = useSelector(state => state.searchForSubs);\n    const setSearchForSubs = (val) => dispatch({type: 'SET_SEARCH_FOR_SUBS', payload: val});\n\n    const currentPermalinkUrl = useSelector(state => state.permalinkUrl);\n    const setPermalinkUrl = (val) => dispatch({type: 'SET_PERMALINK_URL', payload: val});\n\n    const currentContext = useSelector(state => state.showContext);\n    const setContext = (val) => dispatch({type: 'SET_SHOW_CONTEXT', payload: val});\n\n    const currentUser = useSelector(state => state.currentUser);\n    const setCurrentUser = (val) => dispatch({type: 'SET_USER', payload: val});\n\n    const isMobile = useMediaQuery({ maxWidth: 700 });\n\n    let {sub, newSort, postId, userSort, permalinkUrl, user} = parseURL(location.pathname);     \n    let {search, searchSort, searchSub, searchForSubs} = parseSearch(location.search);    \n\n    let showContext = location.search === '?context=10000';\n\n    batch(() => {\n        if (sub !== currentSub) setCurrentSub(sub);\n        if (postId !== currentPostId) setCurrentPostId(postId);\n        if (userSort !== currentUserSort) setCurrentUserSort(userSort);\n        if (newSort.length > 0 && newSort !== currentSort) setCurrentSort(newSort);\n        if (permalinkUrl !== currentPermalinkUrl) setPermalinkUrl(permalinkUrl);\n        if (showContext !== currentContext) setContext(showContext);\n        if (user.length > 0 && user !== currentUser) setCurrentUser(user);\n        \n        //if moving from user list to post to post list, then need to make sure user is reset otherwise still displays user list\n        if (user.length === 0 && newSort.length > 0 && postId.length === 0) setCurrentUser('');\n\n        if (postId.length > 0 || currentPostId.length > 0) return;\n        if (search !== currentSearch) setCurrentSearch(search);\n        if (searchSort !== currentSearchSort) setCurrentSearchSort(searchSort);\n        if (searchSub !== currentSearchSub) setCurrentSearchSub(searchSub);\n        if (searchForSubs !== currentSearchForSubs) setSearchForSubs(searchForSubs);\n    });\n\n    //when changing sub or sort method, get post list and clear search\n    useEffect(() => {   \n        if (isMobile) closeMenus(); \n        if (currentSub.length === 0) return;        \n        if (currentPostId.length > 0 && posts.length > 0) return;  \n        // if (currentSub === 'user' && posts.length > 0) return;        \n        getPostList();\n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentSort, currentSub, currentUser, currentUserSort, currentSearch, currentSearchSort, currentSearchSub, currentSearchForSubs]);\n\n    //return to scroll positiong before going to a post\n    useEffect(() => {\n        if (currentPostId.length === 0) {\n            window.scrollTo(0,scrollPos);\n        }\n        closeMenus();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentPostId]);\n\n    const onClickLink = useCallback((url) => (e) => {\n        let scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        setScrollPos(oldVal => scrollTop);\n        history.push(url);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    if (sub !== currentSub || postId !== currentPostId || userSort !== currentUserSort || (newSort.length > 0 && newSort !== currentSort)) return <div></div>;\n\n    if (currentSub.length === 0) {\n        let redirectSub = '';\n        let storedSubs = localStorage.getItem('subs');\n        storedSubs = storedSubs ? JSON.parse(storedSubs) : [];\n        if (storedSubs.length > 0) redirectSub = storedSubs[0];\n        else redirectSub = 'Popular';\n        history.push(`/${redirectSub}/${currentSort}`);\n        return <div></div>;\n    }\n\n    const onReload = () => {\n        if (currentPostId.length > 0) getComments();\n        else getPostList(false, true);\n    }\n\n    const onBackClick = () => {\n        history.goBack();\n    }\n\n    const getMainPage = () => {\n        let heading = currentSub;\n        let subHeading = '';\n        if (currentSearchForSubs) heading = `Searching Subs: ${currentSearch}`;\n        if (currentSearch.length > 0 && !currentSearchForSubs) subHeading = `Searching: ${decodeURI(currentSearch)}`;\n        if (currentSearch.length > 0 && !currentSearchForSubs && currentSearch.includes('flair_name')) subHeading = `Searching Flair: ${parseFlair(decodeURI(currentSearch.replace('flair_name:', '')))}`;\n        if (currentSub === 'user') heading = `${currentUser}`;\n        \n        return (\n            <React.Fragment>\n                <Header heading={heading} subHeading={subHeading} onReload={onReload}/>\n                { !isMobile && currentPostId.length === 0 ? <FlairList/> : null }\n                { currentPostId.length > 0 ? <Post/> : null }\n                <PostList onClickLink={onClickLink}/>\n            </React.Fragment>\n        );\n    }\n\n    if (isMobile) {\n        return (\n            <ErrorBoundary history={history}>\n                <div style={{height: '100%', overflow: 'hidden'}}>\n                    <TopMenu onBackClick={onBackClick}/>\n                    <div style={{marginTop: '50px'}}></div>\n                    { getMainPage() }\n                </div>\n            </ErrorBoundary>\n        );\n    } else {\n        return (\n            <ErrorBoundary history={history}>\n                <div style={{display: 'flex', height: '100%'}}>\n                    <div>\n                        <SideMenu/>\n                    </div>\n                    <div style={{width: 'calc(100% - 250px)', height: '100%', overflow: 'scroll', marginLeft: '250px', position: 'relative'}} id='mainPage'>\n                        { getMainPage() }\n                    </div>\n                </div>\n            </ErrorBoundary>\n        );\n    }\n}\n\nexport default Page;","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport Page from './MainPage';\n\nconst App = () => {\n    return (\n        <Router>\n            <Route path=\"/\" component={Page}/>\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n         <App />\n    </Provider>\n        , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}